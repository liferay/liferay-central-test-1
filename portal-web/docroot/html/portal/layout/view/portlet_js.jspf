<%
/**
 * Copyright (c) 2000-2008 Liferay, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
%>

function addPortletHTML(options) {
	var portletBoundary;
	var url = options.url;
	var placeHolder = options.placeHolder;
	var beforePortletLoaded = options.beforePortletLoaded;
	var onComplete = options.onComplete;

	var addPortletReturn = function(html) {

		var container = placeHolder.parentNode;
		var jContainer = jQuery(container);

		if (jContainer.is('.empty')) {
			jContainer.removeClass('empty');
		}

		var portletBound = jQuery(html)[0];
		var portletId = Liferay.Util.getPortletId(portletBound.id);

		portletBound.portletId = portletId;

		Liferay.Portlet.flagAjax(portletId);

		container.replaceChild(portletBound, placeHolder);

		if (Liferay.Browser.is_ie) {
			Liferay.Util.evalScripts(portletBound);
		}

		<c:if test="<%= (layout != null) && (LayoutPermissionUtil.contains(permissionChecker, layout, ActionKeys.UPDATE)) %>">
			if (!portletBound.isStatic) {
				Liferay.Layout.refresh(portletBound);
			}
		</c:if>

		if (Liferay.Browser.is_firefox) {
			setTimeout("Liferay.Portlet.process(\"" + portletId + "\")", 0);
		}
		else {
			Liferay.Portlet.process(portletId);
		}

		Liferay.Util.addInputType(portletBound.id);
		Liferay.Util.addInputFocus(portletBound.id);

		if (window.location.hash) {
			window.location.hash = "p_" + portletId;
		}

		portletBoundary = portletBound;

		if (onComplete) {
			onComplete(portletBoundary, portletId);
		}

		var jContainer = jQuery(container);

		if (jContainer.is('.empty')) {
			jContainer.removeClass('empty');
		}

		return portletId;
	};

	if (beforePortletLoaded) {
		beforePortletLoaded(placeHolder);
	}

	jQuery.ajax(
		{
			url: url,
			complete: function(xHR) {
				addPortletReturn(xHR.responseText);
			}
		}
	);
}

function closePortlet(plid, portletId, doAsUserId, skipConfirm) {
	if (skipConfirm || confirm('<%= UnicodeLanguageUtil.get(pageContext, "are-you-sure-you-want-to-remove-this-component") %>')) {
		var curItem = document.getElementById("p_p_id_" + portletId + "_");
		var column = jQuery(curItem).parents('.lfr-portlet-column');
		var parent = curItem.parentNode;

		parent.removeChild(curItem);

		if (curItem = document.getElementById(portletId)) {
			parent = curItem.parentNode;

			parent.removeChild(curItem);
		}

		if (LayoutConfiguration) {
			LayoutConfiguration.initialized = false;
		}

		if (themeDisplay.layoutMaximized) {
			location.href = "<%= themeDisplay.getPathMain() %>/portal/update_layout?p_l_id=" + plid + "&p_p_id=" + portletId + "&doAsUserId=" + doAsUserId + "&<%= Constants.CMD %>=<%= Constants.DELETE %>&referer=" + encodeURIComponent("<%= themeDisplay.getPathMain() %>/portal/layout?p_l_id=" + plid + "&doAsUserId=" + doAsUserId) + "&refresh=1";
		}
		else {
			var url = '<%= themeDisplay.getPathMain() %>/portal/update_layout';

			jQuery.ajax(
				{
					url: url,
					data: {
						p_l_id: plid,
						p_p_id: portletId,
						doAsUserId: doAsUserId,
						'<%= Constants.CMD %>': '<%= Constants.DELETE %>'
					}
				}
			);

			var portletsLeft = column.find('.portlet-boundary').length;
			if (!portletsLeft) {
				column.addClass('empty');
			}
		}

		Liferay.Portlet.remove(portletId);

		var jContainer = jQuery(parent);

		var portletsLeft = jContainer.find('.portlet-boundary').length;

		if (!portletsLeft) {
			jContainer.addClass('empty');
		}

		Liferay.Publisher.register('closePortlet');
		Liferay.Publisher.deliver('closePortlet', {plid: plid, portletId: portletId});
	}
	else {
		self.focus();
	}
}

function minimizePortlet(plid, portletId, restore, doAsUserId) {
	if (themeDisplay.layoutMaximized) {
		location.href = "<%= themeDisplay.getPathMain() %>/portal/update_layout?p_l_id=" + plid + "&p_p_id=" + portletId + "&p_p_restore=" + restore + "&doAsUserId=" + doAsUserId + "&<%= Constants.CMD %>=minimize&referer=" + encodeURIComponent("<%= themeDisplay.getPathMain() %>/portal/layout?p_l_id=" + plid + "&doAsUserId=" + doAsUserId) + "&refresh=1";
	}
	else {
		var portlet = jQuery('#p_p_id_' + portletId + '_');
		var portletContentContainer = portlet.find('.portlet-content-container');

		var buttonsEl = jQuery("#p_p_body_" + portletId + "_min_buttons");

		var html = buttonsEl.html();

		if (restore) {
			portletContentContainer.show(
				'blind',
				{
					direction: 'vertical'
				},
				'fast'
			);

			html = html.replace(", true", ", false");
			html = html.replace("restore.png", "minimize.png");
			html = html.replace("<liferay-ui:message key="restore" />", "<liferay-ui:message key="minimize" />");
		}
		else {
			portletContentContainer.hide(
				'blind',
				{
					direction: 'vertical'
				},
				'fast'
			);

			html = html.replace(", false", ", true");
			html = html.replace("minimize.png", "restore.png");
			html = html.replace("<liferay-ui:message key="minimize" />", "<liferay-ui:message key="restore" />");

		}

		jQuery.ajax(
			{
				url: '<%= themeDisplay.getPathMain() %>/portal/update_layout',
				data: {
					p_l_id: plid,
					p_p_id: portletId,
					p_p_restore: restore,
					doAsUserId: doAsUserId,
					'<%= Constants.CMD %>': 'minimize'
				}
			}
		);

		buttonsEl.html(html);
	}
}