<%
/**
 * Copyright (c) 2000-2007 Liferay, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
%>

<%
String portletSetupCss = portletSetup.getValue("portlet-setup-css", StringPool.BLANK);
%>

<c:if test="<%= Validator.isNotNull(portletSetupCss) %>">

	<%
	
	try {
		JSONObject jsonObj = new JSONObject(portletSetupCss);	
		
		//////
		ArrayList finalCSS = new ArrayList();
		ArrayList unitArray = new ArrayList();
		unitArray.add("px");
		unitArray.add("em");
		unitArray.add("%");
		
		String sameForAllKey = "sameForAll";
		String valueKey = "value";
		String unitKey = "unit";
		String topKey = "top";
		String rightKey = "right";
		String bottomKey = "bottom";
		String leftKey = "left";
		
		//bgData
		JSONObject bgData = jsonObj.getJSONObject("bgData");
		String bgColor = bgData.getString("backgroundColor");
		String bgImage = bgData.getString("backgroundImage");
		
		JSONObject bgPos = bgData.getJSONObject("backgroundPosition");
		JSONObject bgPosLeft = bgPos.getJSONObject(leftKey);
		JSONObject bgPosTop = bgPos.getJSONObject(topKey);
		String bgPosLeftValue = bgPosLeft.getString(valueKey) + bgPosLeft.getString(unitKey);
		String bgPosTopValue = bgPosTop.getString(valueKey) + bgPosTop.getString(unitKey);
		String bgPosValue = bgPosLeftValue + " " + bgPosTopValue;
		
		Boolean useBgImage = bgData.getBoolean("useBgImage");
		
		if (!bgColor.equals("")) {
			finalCSS.add("background-color: " + bgColor);
		}
		if (!bgImage.equals("")) {
			finalCSS.add("background-image: url(" + bgImage + ")");
		}
		if (useBgImage) {
			finalCSS.add("background-position: " + bgPosValue);
		}
		
		//Border data
		JSONObject borderData = jsonObj.getJSONObject("borderData");
		JSONObject borderWidth = borderData.getJSONObject("borderWidth");
		JSONObject borderStyle = borderData.getJSONObject("borderStyle");
		JSONObject borderColor = borderData.getJSONObject("borderColor");
		
		Boolean ufaBorderWidth = borderWidth.getBoolean(sameForAllKey);
		Boolean ufaBorderStyle = borderStyle.getBoolean(sameForAllKey);
		Boolean ufaBorderColor = borderColor.getBoolean(sameForAllKey);
		
		//Width
		JSONObject borderWidthTop = borderWidth.getJSONObject(topKey);
		JSONObject borderWidthRight = borderWidth.getJSONObject(rightKey);
		JSONObject borderWidthBottom = borderWidth.getJSONObject(bottomKey);
		JSONObject borderWidthLeft = borderWidth.getJSONObject(leftKey);
		
		String borderTopWidthValue = borderWidthTop.getString(valueKey) + borderWidthTop.getString(unitKey);
		String borderRightWidthValue = borderWidthRight.getString(valueKey) + borderWidthRight.getString(unitKey);
		String borderBottomWidthValue = borderWidthBottom.getString(valueKey) + borderWidthBottom.getString(unitKey);
		String borderLeftWidthValue = borderWidthLeft.getString(valueKey) + borderWidthLeft.getString(unitKey);
		
		//Style
		String borderTopStyleValue = borderStyle.getString(topKey);
		String borderRightStyleValue = borderStyle.getString(rightKey);
		String borderBottomStyleValue = borderStyle.getString(bottomKey);
		String borderLeftStyleValue = borderStyle.getString(leftKey);
		
		//Color
		String borderTopColorValue = borderColor.getString(topKey);
		String borderRightColorValue = borderColor.getString(rightKey);
		String borderBottomColorValue = borderColor.getString(bottomKey);
		String borderLeftColorValue = borderColor.getString(leftKey);
		
		if (ufaBorderWidth) {
			if (unitArray.indexOf(borderTopWidthValue) < 0) {
				finalCSS.add("border-width: " + borderTopWidthValue);
			}
		} else {
			if (unitArray.indexOf(borderTopWidthValue) < 0) {
				finalCSS.add("border-width-top: " + borderTopWidthValue);
			}
			if (unitArray.indexOf(borderRightWidthValue) < 0) {
				finalCSS.add("border-width-right: " + borderRightWidthValue);
			}
			if (unitArray.indexOf(borderBottomWidthValue) < 0) {
				finalCSS.add("border-width-bottom: " + borderBottomWidthValue);
			}
			if (unitArray.indexOf(borderLeftWidthValue) < 0) {
				finalCSS.add("border-width-left: " + borderLeftWidthValue);
			}
		}
		
		if (ufaBorderStyle) {
			finalCSS.add("border-style: " + borderTopStyleValue);
		} else {
			finalCSS.add("border-style-top: " + borderTopStyleValue);
			finalCSS.add("border-style-right: " + borderRightStyleValue);
			finalCSS.add("border-style-bottom: " + borderBottomStyleValue);
			finalCSS.add("border-style-left: " + borderLeftStyleValue);
		}
		
		if (ufaBorderColor) {
			if (!borderTopColorValue.equals("")) {
				finalCSS.add("border-color: " + borderTopColorValue);
			}
		} else {
			if (!borderTopColorValue.equals("")) {
				finalCSS.add("border-color: " + borderTopColorValue);
			}
			if (!borderRightColorValue.equals("")) {
				finalCSS.add("border-color-right: " + borderRightColorValue);
			}
			if (!borderBottomColorValue.equals("")) {
				finalCSS.add("border-color-bottom: " + borderBottomColorValue);
			}
			if (!borderLeftColorValue.equals("")) {
				finalCSS.add("border-color-left: " + borderLeftColorValue);
			}
		}

		//Spacing data
		JSONObject spacingData = jsonObj.getJSONObject("spacingData");
		JSONObject margin = spacingData.getJSONObject("margin");
		JSONObject padding = spacingData.getJSONObject("padding");

		Boolean ufaMargin = margin.getBoolean(sameForAllKey);
		Boolean ufaPadding = padding.getBoolean(sameForAllKey);
		
		
		//Margin
		JSONObject marginTop = margin.getJSONObject(topKey);
		JSONObject marginRight = margin.getJSONObject(rightKey);
		JSONObject marginBottom = margin.getJSONObject(bottomKey);
		JSONObject marginLeft = margin.getJSONObject(leftKey);
		
		String marginTopValue = marginTop.getString(valueKey) + marginTop.getString(unitKey);
		String marginRightValue = marginRight.getString(valueKey) + marginRight.getString(unitKey);
		String marginBottomValue = marginBottom.getString(valueKey) + marginBottom.getString(unitKey);
		String marginLeftValue = marginLeft.getString(valueKey) + marginLeft.getString(unitKey);
		
		if (ufaMargin) {
			if (unitArray.indexOf(marginTopValue) < 0) {
				finalCSS.add("margin: " + marginTopValue);
			}
		} else {
			if (unitArray.indexOf(marginTopValue) < 0) {
				finalCSS.add("margin-top: " + marginTopValue);
			}
			if (unitArray.indexOf(marginRightValue) < 0) {
				finalCSS.add("margin-right: " + marginRightValue);
			}
			if (unitArray.indexOf(marginBottomValue) < 0) {
				finalCSS.add("margin-bottom: " + marginBottomValue);
			}
			if (unitArray.indexOf(marginLeftValue) < 0) {
				finalCSS.add("margin-left: " + marginLeftValue);
			}
		}
		
		//Padding
		JSONObject paddingTop = padding.getJSONObject(topKey);
		JSONObject paddingRight = padding.getJSONObject(rightKey);
		JSONObject paddingBottom = padding.getJSONObject(bottomKey);
		JSONObject paddingLeft = padding.getJSONObject(leftKey);
		//System.out.println(portletDisplay.getId() + paddingTop);
		String paddingTopValue = paddingTop.getString(valueKey) + paddingTop.getString(unitKey);
		String paddingRightValue = paddingRight.getString(valueKey) + paddingRight.getString(unitKey);
		String paddingBottomValue = paddingBottom.getString(valueKey) + paddingBottom.getString(unitKey);
		String paddingLeftValue = paddingLeft.getString(valueKey) + paddingLeft.getString(unitKey);
		
		if (ufaPadding) {
			if (unitArray.indexOf(paddingTopValue) < 0) {
				finalCSS.add("padding: " + paddingTopValue);
			}
		} else {
			if (unitArray.indexOf(paddingTopValue) < 0) {
				finalCSS.add("padding-top: " + paddingTopValue);
			}
			if (unitArray.indexOf(paddingRightValue) < 0) {
				finalCSS.add("padding-right: " + paddingRightValue);
			}
			if (unitArray.indexOf(paddingBottomValue) < 0) {
				finalCSS.add("padding-bottom: " + paddingBottomValue);
			}
			if (unitArray.indexOf(paddingLeftValue) < 0) {
				finalCSS.add("padding-left: " + paddingLeftValue);
			}
		}
		
		
		//Text data
		JSONObject textData = jsonObj.getJSONObject("textData");
		
		String color = textData.getString("color");
		String fontFamily = textData.getString("fontFamily");
		String fontSize = textData.getString("fontSize");
		String fontStyle = textData.getString("fontStyle");
		String fontWeight = textData.getString("fontWeight");
		String letterSpacing = textData.getString("letterSpacing");
		String lineHeight = textData.getString("lineHeight");
		String textAlign = textData.getString("textAlign");
		String textDecoration = textData.getString("textDecoration");
		String wordSpacing = textData.getString("wordSpacing");
		
		if (!color.equals("")) {
			finalCSS.add("color: " + color);
		}
		if (!fontFamily.equals("")) {
			finalCSS.add("font-family: '" + fontFamily + "'");
		}
		if (!fontSize.equals("")) {
			finalCSS.add("font-size: " + fontSize);
		}
		
		if (!fontStyle.equals("")) {
			finalCSS.add("font-style: " + fontStyle);
		}
		if (!fontWeight.equals("")) {
			finalCSS.add("font-weight: " + fontWeight);
		}
		
		if (!letterSpacing.equals("")) {
			finalCSS.add("letter-spacing: " + letterSpacing);
		}
		if (!lineHeight.equals("")) {
			finalCSS.add("line-height: " + lineHeight);
		}
		if (!textAlign.equals("")) {
			finalCSS.add("text-align: " + textAlign);
		}
		if (!textDecoration.equals("")) {
			finalCSS.add("text-decoration: " + textDecoration);
		}
		if (!wordSpacing.equals("")) {
			finalCSS.add("word-spacing: " + wordSpacing);
		}

		//Advanced data/Custom CSS
		JSONObject advancedData = jsonObj.getJSONObject("advancedData");
		
		String customCSS = advancedData.getString("customCSS");
		
		//Write opening portlet CSS
		out.print("#p_p_id_" + portletDisplay.getId() + "_ .portlet {\n");

		String[] finalCSSArray = (String[])finalCSS.toArray(new String[0]);
		String finalCSSString = StringUtil.merge(finalCSSArray, ";\n");	
		out.print(finalCSSString);

		//Write closing portlet CSS
		out.print("\n}\n");
		
		//Write custom CSS
		if (!customCSS.equals("")) {
			out.print(customCSS);
		}
	}
	catch (Exception e) {
		if (_log.isWarnEnabled()) {
			_log.warn(e.getMessage());
		}
	}
	%>

</c:if>