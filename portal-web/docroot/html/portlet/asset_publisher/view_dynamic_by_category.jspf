<%
/**
 * Copyright (c) 2000-2009 Liferay, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
%>

<%
long[] assetTagIds = AssetTagLocalServiceUtil.getTagIds(scopeGroupId, assetTagNames);
long[] notAssetTagIds = AssetTagLocalServiceUtil.getTagIds(scopeGroupId, notAssetTagNames);

if (allowEmptyResults && (assetTagIds.length == 0) && (notAssetTagIds.length == 0)) {
	assetTagIds = new long[] {-1};
}

AssetEntryQuery assetEntryQuery = new AssetEntryQuery();

assetEntryQuery.setCategoryIds(assetCategoryIds, andOperator);
assetEntryQuery.setClassNameIds(classNameIds);
assetEntryQuery.setExcludeZeroViewCount(excludeZeroViewCount);
assetEntryQuery.setGroupId(scopeGroupId);
assetEntryQuery.setNotCategoryIds(notAssetCategoryIds, andOperator);
assetEntryQuery.setNotTagIds(notAssetTagIds, andOperator);
assetEntryQuery.setOrderByCol1(orderByColumn1);
assetEntryQuery.setOrderByCol2(orderByColumn2);
assetEntryQuery.setOrderByType1(orderByType1);
assetEntryQuery.setOrderByType2(orderByType2);
assetEntryQuery.setTagIds(assetTagIds, andOperator);

int total = AssetEntryLocalServiceUtil.getEntriesCount(assetEntryQuery);

searchContainer.setTotal(total);

Map<String, List<AssetEntry>> assetEntriesByCategory = new TreeMap<String, List<AssetEntry>>();

List<AssetEntry> assetEntries = AssetEntryLocalServiceUtil.getEntries(assetEntryQuery);

for (AssetEntry assetEntry : assetEntries) {
	List<AssetTag> assetTags = AssetTagLocalServiceUtil.getEntryTags(assetEntry.getEntryId());

	for (AssetTag assetTag : assetTags) {
		String assetTagLabel = null;

		try {
			AssetTagProperty descriptionProperty = AssetTagPropertyLocalServiceUtil.getTagProperty(assetTag.getTagId(), themeDisplay.getLanguageId());

			assetTagLabel = descriptionProperty.getValue();
		}
		catch (NoSuchTagPropertyException nstpe1) {
			try {
				AssetTagProperty descriptionProperty = AssetTagPropertyLocalServiceUtil.getTagProperty(assetTag.getTagId(), "en_US");

				assetTagLabel = descriptionProperty.getValue();
			}
			catch (NoSuchTagPropertyException nstpe2) {
				assetTagLabel = StringUtil.upperCaseFirstLetter(assetTag.getName());
			}
		}

		List assetEntriesList = assetEntriesByCategory.get(assetTagLabel);

		if (assetEntriesList == null) {
			assetEntriesList = new ArrayList();

			assetEntriesByCategory.put(assetTagLabel, assetEntriesList);
		}

		assetEntriesList.add(assetEntry);

		break;
	}
}

Iterator<Map.Entry<String, List<AssetEntry>>> itr = assetEntriesByCategory.entrySet().iterator();

if (!itr.hasNext()) {
	if (!showPortletWithNoResults) {
		renderRequest.setAttribute(WebKeys.PORTLET_CONFIGURATOR_VISIBILITY, Boolean.TRUE);
	}
%>

	<liferay-ui:message key="there-are-no-results" />

<%
}

while (itr.hasNext()) {
	Map.Entry<String, List<AssetEntry>> entry = itr.next();

	String assetTagLabel = entry.getKey();
	List<AssetEntry> results = entry.getValue();

	request.setAttribute("view.jsp-results", results);
%>

	<h3 class="asset-tag-label"><%= assetTagLabel %></h3>

	<div class="asset-tag-entries">

		<%
		for (int assetEntryIndex = 0; (assetEntryIndex < results.size()) && (assetEntryIndex < delta); assetEntryIndex++) {
			AssetEntry assetEntry = results.get(assetEntryIndex);

			String className = PortalUtil.getClassName(assetEntry.getClassNameId());
			long classPK = assetEntry.getClassPK();

			String title = assetEntry.getTitle();
			String summary = StringPool.BLANK;
			String viewURL = StringPool.BLANK;
			String viewURLMessage = StringPool.BLANK;
			String editURL = StringPool.BLANK;

			boolean show = true;

			request.setAttribute("view.jsp-assetEntryIndex", new Integer(assetEntryIndex));

			request.setAttribute("view.jsp-assetEntry", assetEntry);

			request.setAttribute("view.jsp-title", title);
			request.setAttribute("view.jsp-summary", summary);
			request.setAttribute("view.jsp-viewURL", viewURL);
			request.setAttribute("view.jsp-viewURLMessage", viewURLMessage);

			request.setAttribute("view.jsp-className", className);
			request.setAttribute("view.jsp-classPK", new Long(classPK));

			request.setAttribute("view.jsp-show", new Boolean(show));

			try {
		%>

				<%@ include file="/html/portlet/asset_publisher/view_display.jspf" %>

		<%
			}
			catch (Exception e) {
				_log.error(e.getMessage());
			}
		}
		%>

	</div>

<%
}
%>