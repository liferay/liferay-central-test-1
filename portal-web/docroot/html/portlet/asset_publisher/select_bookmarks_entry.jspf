<%
/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
%>

<%
String tabs1 = ParamUtil.getString(request, "tabs1", "folders");

long groupId = tabs1.equals("folders") ? scopeGroupId : themeDisplay.getCompanyGroupId();

int assetEntryOrder = ParamUtil.getInteger(request, "assetEntryOrder", -1);
long folderId = ParamUtil.getLong(request, "assetParentId", BookmarksFolderConstants.DEFAULT_PARENT_FOLDER_ID);

BookmarksFolder folder = null;

if (folderId > 0) {
	try {
		folder = BookmarksFolderLocalServiceUtil.getFolder(folderId);
	}
	catch (com.liferay.portlet.bookmarks.NoSuchFolderException nsfe) {
	}
}

PortletURL portletURL = renderResponse.createRenderURL();

portletURL.setParameter("struts_action", "/portlet_configuration/edit_configuration");
portletURL.setParameter("redirect", redirect);
portletURL.setParameter("backURL", redirect);
portletURL.setParameter("portletResource", portletResource);
portletURL.setParameter("typeSelection", BookmarksEntry.class.getName());
%>

<liferay-ui:tabs
	backURL="<%= configurationRenderURL.toString() %>"
	names="folders,shared-folders"
	url="<%= portletURL.toString() %>"
/>

<c:if test="<%= folder != null %>">
	<div class="breadcrumbs">
		<%= getBreadcrumbs(folder, null, pageContext, renderRequest, renderResponse, portletResource, redirect) %>
	</div>
</c:if>

<%
List<String> headerNames = new ArrayList<String>();

headerNames.add("folder");
headerNames.add("num-of-folders");
headerNames.add("num-of-entries");

SearchContainer searchContainer = new SearchContainer(renderRequest, null, null, "cur1", SearchContainer.DEFAULT_DELTA, portletURL, headerNames, "there-are-no-folders");

int total = BookmarksFolderLocalServiceUtil.getFoldersCount(groupId, folderId);

searchContainer.setTotal(total);

List results = BookmarksFolderLocalServiceUtil.getFolders(groupId, folderId, searchContainer.getStart(), searchContainer.getEnd());

searchContainer.setResults(results);

List resultRows = searchContainer.getResultRows();

for (int i = 0; i < results.size(); i++) {
	BookmarksFolder curFolder = (BookmarksFolder)results.get(i);

	ResultRow row = new ResultRow(curFolder, curFolder.getFolderId(), i);

	PortletURL rowURL = renderResponse.createRenderURL();

	rowURL.setParameter("struts_action", "/portlet_configuration/edit_configuration");
	rowURL.setParameter("tabs1", tabs1);
	rowURL.setParameter("redirect", redirect);
	rowURL.setParameter("backURL", redirect);
	rowURL.setParameter("portletResource", portletResource);
	rowURL.setParameter("typeSelection", BookmarksEntry.class.getName());
	rowURL.setParameter("assetParentId", String.valueOf(curFolder.getFolderId()));

	// Name and description

	StringBundler sb = new StringBundler(8);

	sb.append("<img align=\"left\" border=\"0\" src=\"");
	sb.append(themeDisplay.getPathThemeImages());
	sb.append("/common/folder.png\">");
	sb.append("<strong>");
	sb.append(curFolder.getName());
	sb.append("</strong>");

	if (Validator.isNotNull(curFolder.getDescription())) {
		sb.append("<br />");
		sb.append(curFolder.getDescription());
	}

	row.addText(sb.toString(), rowURL);

	// Statistics

	List subfolderIds = new ArrayList();

	subfolderIds.add(new Long(curFolder.getFolderId()));

	BookmarksFolderLocalServiceUtil.getSubfolderIds(subfolderIds, groupId, curFolder.getFolderId());

	int foldersCount = subfolderIds.size() - 1;
	int entriesCount = BookmarksEntryLocalServiceUtil.getFoldersEntriesCount(groupId, subfolderIds);

	row.addText(String.valueOf(foldersCount), rowURL);
	row.addText(String.valueOf(entriesCount), rowURL);

	// Add result row

	resultRows.add(row);
}
%>

<liferay-ui:search-iterator searchContainer="<%= searchContainer %>" />

<br />

<liferay-ui:tabs names="entries" />

<%
headerNames.clear();

headerNames.add("entry");
headerNames.add("url");
headerNames.add("visits");
headerNames.add("modified-date");

searchContainer = new SearchContainer(renderRequest, null, null, "cur2", SearchContainer.DEFAULT_DELTA, portletURL, headerNames, "there-are-no-entries");

total = BookmarksEntryLocalServiceUtil.getEntriesCount(groupId, folderId);

searchContainer.setTotal(total);

results = BookmarksEntryLocalServiceUtil.getEntries(groupId, folderId, searchContainer.getStart(), searchContainer.getEnd(), null);

searchContainer.setResults(results);

resultRows = searchContainer.getResultRows();

for (int i = 0; i < results.size(); i++) {
	BookmarksEntry entry = (BookmarksEntry)results.get(i);

	entry = entry.toEscapedModel();

	ResultRow row = new ResultRow(entry, entry.getEntryId(), i);

	AssetEntry assetEntry = AssetEntryLocalServiceUtil.getEntry(BookmarksEntry.class.getName(), entry.getEntryId());

	StringBundler sb = new StringBundler(11);

	sb.append("javascript:");
	sb.append(renderResponse.getNamespace());
	sb.append("selectAsset('");
	sb.append(assetEntry.getEntryId());
	sb.append("', '");
	sb.append(assetEntry.getEntryId());
	sb.append("', '");
	sb.append(UnicodeFormatter.toString(assetEntry.getTitle()));
	sb.append("', '");
	sb.append(assetEntryOrder);
	sb.append("');");

	String rowHREF = sb.toString();

	TextSearchEntry rowTextEntry = new TextSearchEntry(SearchEntry.DEFAULT_ALIGN, SearchEntry.DEFAULT_VALIGN, entry.getName(), rowHREF);

	// Name

	row.addText(rowTextEntry);

	// URL

	rowTextEntry = (TextSearchEntry)rowTextEntry.clone();

	rowTextEntry.setName(entry.getUrl());

	row.addText(rowTextEntry);

	// Visits

	rowTextEntry = (TextSearchEntry)rowTextEntry.clone();

	rowTextEntry.setName(String.valueOf(entry.getVisits()));

	row.addText(rowTextEntry);

	// ModifiedDate

	rowTextEntry = (TextSearchEntry)rowTextEntry.clone();

	rowTextEntry.setName(dateFormatDate.format(entry.getModifiedDate()));

	row.addText(rowTextEntry);

	// Add result row

	resultRows.add(row);
}
%>

<liferay-ui:search-iterator searchContainer="<%= searchContainer %>" />

<br />

<%!
public static String getBreadcrumbs(BookmarksFolder folder, BookmarksEntry entry, PageContext pageContext, RenderRequest req, RenderResponse res, String portletResource, String redirect) throws Exception {
	if ((entry != null) && (folder == null)) {
		folder = entry.getFolder();
	}

	PortletURL foldersURL = res.createRenderURL();

	foldersURL.setParameter("struts_action", "/portlet_configuration/edit_configuration");
	foldersURL.setParameter("redirect", redirect);
	foldersURL.setParameter("backURL", redirect);
	foldersURL.setParameter("portletResource", portletResource);
	foldersURL.setParameter("typeSelection", BookmarksEntry.class.getName());

	String foldersLink = "<a href=\"" + foldersURL.toString() + "\">" + LanguageUtil.get(pageContext, "folders") + "</a>";

	if (folder == null) {
		return foldersLink;
	}

	String breadcrumbs = StringPool.BLANK;

	if (folder != null) {
		for (int i = 0;; i++) {
			PortletURL portletURL = res.createRenderURL();

			portletURL.setParameter("struts_action", "/portlet_configuration/edit_configuration");
			portletURL.setParameter("redirect", redirect);
			portletURL.setParameter("backURL", redirect);
			portletURL.setParameter("portletResource", portletResource);
			portletURL.setParameter("typeSelection", BookmarksEntry.class.getName());
			portletURL.setParameter("assetParentId", String.valueOf(folder.getFolderId()));

			String folderLink = "<a href=\"" + portletURL.toString() + "\">" + folder.getName() + "</a>";

			if (i == 0) {
				breadcrumbs = folderLink;
			}
			else {
				breadcrumbs = folderLink + " &raquo; " + breadcrumbs;
			}

			if (folder.isRoot()) {
				break;
			}

			folder = BookmarksFolderLocalServiceUtil.getFolder(folder.getParentFolderId());
		}
	}

	breadcrumbs = foldersLink + " &raquo; " + breadcrumbs;

	return breadcrumbs;
}
%>