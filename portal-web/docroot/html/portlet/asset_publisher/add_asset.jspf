<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
addPortletURLs = getAddPortletURLs(liferayPortletRequest, liferayPortletResponse, classNameIds, classTypeIds, assetEntryQuery.getAllCategoryIds(), allAssetTagNames);
%>

<c:if test="<%= !addPortletURLs.isEmpty() %>">

	<%
	String taglibId = "addNew";

	if (groupIds.length > 1) {
		taglibId = taglibId.concat("In");

		if (themeDisplay.getCompanyGroupId() == groupId) {
			taglibId = taglibId.concat("Global");
		}
		else {
			Group group = GroupLocalServiceUtil.getGroup(groupId);

			if (group.isLayout()) {
				Layout scopeLayout = LayoutLocalServiceUtil.getLayout(group.getClassPK());

				String friendlyURL = scopeLayout.getFriendlyURL();

				taglibId = taglibId.concat(friendlyURL.substring(1));
			}
			else {
				String friendlyURL = group.getFriendlyURL();

				taglibId = taglibId.concat(friendlyURL.substring(1));
			}
		}
	}
	%>

	<liferay-ui:icon-menu
		align="left"
		icon='<%= themeDisplay.getPathThemeImages() + "/common/add.png" %>'
		id='<%= taglibId %>'
		message='<%= LanguageUtil.format(pageContext, (groupIds.length == 1) ? "add-new" : "add-new-in-x", new Object[] {HtmlUtil.escape((GroupLocalServiceUtil.getGroup(groupId)).getDescriptiveName(locale))}) %>'
	>

		<%
		boolean hasDLFileEntrySubtype = hasSubtype(DLFileEntry.class.getName(), addPortletURLs);
		boolean hasJournalArticleSubtype = hasSubtype(JournalArticle.class.getName(), addPortletURLs);

		for (Map.Entry<String, PortletURL> entry : addPortletURLs.entrySet()) {
			String className = entry.getKey();

			String message = null;

			int pos = className.indexOf(AssetUtil.CLASSNAME_SEPARATOR);

			if (pos != -1) {
				message = className.substring(pos + AssetUtil.CLASSNAME_SEPARATOR.length());

				className = className.substring(0, pos);
			}

			AssetRendererFactory assetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(className);

			if (pos == -1) {
				message = assetRendererFactory.getTypeName(locale, hasSubtype(className, addPortletURLs));
			}

			PortletURL addPortletURL = entry.getValue();

			addPortletURL.setParameter("groupId", String.valueOf(groupId));

			String addPortletURLString = addPortletURL.toString();

			addPortletURLString = HttpUtil.addParameter(addPortletURLString, "doAsGroupId", groupId);
			addPortletURLString = HttpUtil.addParameter(addPortletURLString, "refererPlid", plid);

			defaultAssetPublisherPortletId = typeSettingsProperties.getProperty(LayoutTypePortletConstants.DEFAULT_ASSET_PUBLISHER_PORTLET_ID);

			if (defaultAssetPublisher) {
				addPortletURLString = HttpUtil.addParameter(addPortletURLString, "layoutUuid", layout.getUuid());
			}

			String taglibEditURL = "javascript:Liferay.Util.openWindow({dialog: {width: 960}, id: '" + liferayPortletResponse.getNamespace() + "editAsset', title: '" + HtmlUtil.escapeJS(LanguageUtil.format(pageContext, "new-x", HtmlUtil.escape(message))) + "', uri:'" + HtmlUtil.escapeJS(addPortletURLString) + "'});";
		%>

			<c:choose>
				<c:when test="<%= addPortletURLs.size() == 1 %>">
					<aui:button
						onClick="<%= taglibEditURL %>"
						value='<%= LanguageUtil.format(pageContext, "add-x", HtmlUtil.escape(message)) %>'
					/>
				</c:when>
				<c:otherwise>
					<liferay-ui:icon
						message="<%= HtmlUtil.escape(message) %>"
						src="<%= assetRendererFactory.getIconPath(renderRequest) %>"
						url="<%= taglibEditURL %>"
					/>
				</c:otherwise>
			</c:choose>

		<%
		}
		%>

	</liferay-ui:icon-menu>
</c:if>

<%!
public Map<String, PortletURL> getAddPortletURLs(LiferayPortletRequest liferayPortletRequest, LiferayPortletResponse liferayPortletResponse, long[] classNameIds, long[] classTypeIds, long[] allAssetCategoryIds, String[] allAssetTagNames) throws Exception {
	ThemeDisplay themeDisplay = (ThemeDisplay)liferayPortletRequest.getAttribute(WebKeys.THEME_DISPLAY);

	Map<String, PortletURL> addPortletURLs = new TreeMap<String, PortletURL>(new ModelResourceComparator(themeDisplay.getLocale()));

	PortletDisplay portletDisplay = themeDisplay.getPortletDisplay();

	PortletURL redirectURL = liferayPortletResponse.createLiferayPortletURL(themeDisplay.getPlid(), portletDisplay.getId(), PortletRequest.RENDER_PHASE, false);

	redirectURL.setParameter("struts_action", "/asset_publisher/add_asset_redirect");
	redirectURL.setWindowState(LiferayWindowState.POP_UP);

	for (long classNameId : classNameIds) {
		String className = PortalUtil.getClassName(classNameId);

		AssetRendererFactory assetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(className);

		Portlet portlet = PortletLocalServiceUtil.getPortletById(themeDisplay.getCompanyId(), assetRendererFactory.getPortletId());

		if (!portlet.isActive()) {
			continue;
		}

		Map<Long, String> classTypes = assetRendererFactory.getClassTypes(new long[] {themeDisplay.getCompanyGroupId(), themeDisplay.getScopeGroupId()}, themeDisplay.getLocale());

		if ((classTypeIds.length == 0) || classTypes.isEmpty()) {
			PortletURL addPortletURL = AssetUtil.getAddPortletURL(liferayPortletRequest, liferayPortletResponse, className, 0, allAssetCategoryIds, allAssetTagNames, redirectURL.toString());

			if (addPortletURL != null) {
				addPortletURLs.put(className, addPortletURL);
			}
		}

		for (long classTypeId : classTypes.keySet()) {
			if (ArrayUtil.contains(classTypeIds, classTypeId) || (classTypeIds.length == 0)) {
				PortletURL addPortletURL = AssetUtil.getAddPortletURL(liferayPortletRequest, liferayPortletResponse, className, classTypeId, allAssetCategoryIds, allAssetTagNames, redirectURL.toString());

				if (addPortletURL != null) {
					String mesage = className + AssetUtil.CLASSNAME_SEPARATOR + classTypes.get(classTypeId);

					addPortletURLs.put(mesage, addPortletURL);
				}
			}
		}
	}

	return addPortletURLs;
}

public boolean hasSubtype(String subtypeClassName, Map<String, PortletURL> addPortletURLs) {
	for (Map.Entry<String, PortletURL> entry : addPortletURLs.entrySet()) {
		String className = entry.getKey();

		if (className.startsWith(subtypeClassName) && !className.equals(subtypeClassName)) {
			return true;
		}
	}

	return false;
}
%>