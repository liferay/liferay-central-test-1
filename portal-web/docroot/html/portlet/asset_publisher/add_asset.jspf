<%--
/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
Map<String, PortletURL> addPortletURLs = getAddPortletURLs(liferayPortletRequest, liferayPortletResponse, classNameIds, assetEntryQuery.getAllCategoryIds(), allAssetTagNames);
%>

<c:if test="<%= !addPortletURLs.isEmpty() %>">
	<liferay-ui:icon-menu
		align="left"
		icon='<%= themeDisplay.getPathThemeImages() + "/common/add.png" %>'
		message='<%= LanguageUtil.format(pageContext, (groupIds.length == 1) ? "add-new" : "add-new-in-x", new Object[] {(GroupLocalServiceUtil.getGroup(groupId)).getDescriptiveName()}) %>'
		showWhenSingleIcon="<%= true %>"
	>

		<%
		for (Map.Entry<String, PortletURL> entry : addPortletURLs.entrySet()) {
			String className = entry.getKey();

			String message = StringPool.BLANK;

			if (className.equals(JournalArticle.class.getName())) {
				message = "basic-web-content";
			}
			else {
				message = ResourceActionsUtil.getModelResourceNamePrefix() + className;

				int pos = className.indexOf(_CLASSNAME_SEPARATOR);

				if (pos != -1) {
					message = className.substring(pos + _CLASSNAME_SEPARATOR.length(), className.length());

					className = className.substring(0, pos);
				}
			}

			AssetRendererFactory assetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(className);

			PortletURL addPortletURL = entry.getValue();

			addPortletURL.setParameter("groupId", String.valueOf(groupId));

			String addPortletURLString = addPortletURL.toString();

			addPortletURLString = HttpUtil.addParameter(addPortletURLString, "doAsGroupId", groupId);
			addPortletURLString = HttpUtil.addParameter(addPortletURLString, "refererPlid", plid);

			String taglibEditURL = "javascript:Liferay.Util.openWindow({dialog: {width: 960}, id: '" + liferayPortletResponse.getNamespace() + "', title: '" + ResourceActionsUtil.getModelResource(locale, className) + "', uri:'" + addPortletURLString + "'});";
		%>

			<liferay-ui:icon
				message="<%= message %>"
				src="<%= assetRendererFactory.getIconPath(renderRequest) %>"
				url="<%= taglibEditURL %>"
			/>

		<%
		}
		%>

	</liferay-ui:icon-menu>
</c:if>

<%!
public PortletURL getAddPortletURL(LiferayPortletRequest liferayPortletRequest, LiferayPortletResponse liferayPortletResponse, String className, long[] allAssetCategoryIds, String[] allAssetTagNames, long dlFileEntryTypeId, String journalStructureId) throws Exception {
	ThemeDisplay themeDisplay = (ThemeDisplay)liferayPortletRequest.getAttribute(WebKeys.THEME_DISPLAY);

	AssetRendererFactory assetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(className);

	if (assetRendererFactory == null) {
		return null;
	}

	PortletURL addPortletURL = assetRendererFactory.getURLAdd(liferayPortletRequest, liferayPortletResponse);

	if (addPortletURL == null) {
		return null;
	}

	addPortletURL.setWindowState(LiferayWindowState.POP_UP);

	addPortletURL.setPortletMode(PortletMode.VIEW);

	PortletURL redirectURL = liferayPortletResponse.createRenderURL();

	redirectURL.setWindowState(LiferayWindowState.POP_UP);

	redirectURL.setParameter("struts_action", "/asset_publisher/add_asset_redirect");

	addPortletURL.setParameter("redirect", HtmlUtil.escapeURL(redirectURL.toString()));

	String referringPortletResource = ParamUtil.getString(liferayPortletRequest, "portletResource");

	if (Validator.isNotNull(referringPortletResource)) {
		addPortletURL.setParameter("referringPortletResource", referringPortletResource);
	}
	else {
		PortletDisplay portletDisplay = themeDisplay.getPortletDisplay();

		addPortletURL.setParameter("referringPortletResource", portletDisplay.getId());

		addPortletURL.setParameter("assetCategoryIds", StringUtil.merge(allAssetCategoryIds));
		addPortletURL.setParameter("assetTagNames", StringUtil.merge(allAssetTagNames));

		if (dlFileEntryTypeId >= 0) {
			addPortletURL.setParameter(Constants.CMD, Constants.ADD);
			addPortletURL.setParameter("folderId", String.valueOf(DLFolderConstants.DEFAULT_PARENT_FOLDER_ID));
			addPortletURL.setParameter("fileEntryTypeId", String.valueOf(dlFileEntryTypeId));
		}

		if (Validator.isNotNull(journalStructureId)) {
			addPortletURL.setParameter("structureId", journalStructureId);
		}
	}

	return addPortletURL;
}

public Map<String, PortletURL> getAddPortletURLs(LiferayPortletRequest liferayPortletRequest, LiferayPortletResponse liferayPortletResponse, long[] classNameIds, long[] allAssetCategoryIds, String[] allAssetTagNames) throws Exception {
	ThemeDisplay themeDisplay = (ThemeDisplay)liferayPortletRequest.getAttribute(WebKeys.THEME_DISPLAY);

	Map<String, PortletURL> addPortletURLs = new TreeMap<String, PortletURL>(new ModelResourceComparator(themeDisplay.getLocale()));

	ClassName dlFileEntryClassName = ClassNameServiceUtil.getClassName(DLFileEntry.class.getName());
	ClassName journalArticleClassName = ClassNameServiceUtil.getClassName(JournalArticle.class.getName());

	for (long classNameId : classNameIds) {
		ClassName className = ClassNameServiceUtil.getClassName(classNameId);

		if (className.equals(dlFileEntryClassName)) {
			List<DLFileEntryType> dlFileEntryTypes = DLFileEntryTypeLocalServiceUtil.getFolderFileEntryTypes(themeDisplay.getScopeGroupId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, true);

			for (DLFileEntryType dlFileEntryType : dlFileEntryTypes) {
				PortletURL addPortletURL = getAddPortletURL(liferayPortletRequest, liferayPortletResponse, dlFileEntryClassName.getValue(), allAssetCategoryIds, allAssetTagNames, dlFileEntryType.getFileEntryTypeId(), StringPool.BLANK);

				if (addPortletURL != null) {
					String classNameValue = dlFileEntryClassName.getValue();

					if (Validator.isNotNull(dlFileEntryType.getName())) {
						 classNameValue += _CLASSNAME_SEPARATOR + dlFileEntryType.getName();
					}

					addPortletURLs.put(classNameValue, addPortletURL);
				}
			}
		}
		else if (className.equals(journalArticleClassName)) {
			List<JournalStructure> journalStructures = JournalStructureServiceUtil.getStructures(themeDisplay.getScopeGroupId());

			for (JournalStructure journalStructure : journalStructures) {
				PortletURL addPortletURL = getAddPortletURL(liferayPortletRequest, liferayPortletResponse, journalArticleClassName.getValue(), allAssetCategoryIds, allAssetTagNames, -1, journalStructure.getStructureId());

				if (addPortletURL != null) {
					String classNameValue = journalArticleClassName.getValue();

					if (Validator.isNotNull(journalStructure.getName())) {
						 classNameValue += _CLASSNAME_SEPARATOR + journalStructure.getName();
					}

					addPortletURLs.put(classNameValue, addPortletURL);
				}
			}

		}
		else {
			PortletURL addPortletURL = getAddPortletURL(liferayPortletRequest, liferayPortletResponse, className.getValue(), allAssetCategoryIds, allAssetTagNames, -1, StringPool.BLANK);

			if (addPortletURL != null) {
				addPortletURLs.put(className.getValue(), addPortletURL);
			}
		}
	}

	return addPortletURLs;
}

private static final String _CLASSNAME_SEPARATOR = "_CLASSNAME_";
%>