<%--
/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
Map<String, PortletURL> addPortletURLs = getAddPortletURLs(renderRequest, renderResponse, classNameIds, assetEntryQuery.getAllCategoryIds(), allAssetTagNames);
%>

<c:if test="<%= !addPortletURLs.isEmpty() %>">
	<div class="lfr-meta-actions edit-controls">
		<liferay-ui:icon-menu
			align="left"
			icon='<%= themeDisplay.getPathThemeImages() + "/common/add.png" %>'
			message='<%= LanguageUtil.format(pageContext, (groupIds.length == 1) ? "add-new" : "add-new-in-x", new Object[] {(GroupLocalServiceUtil.getGroup(groupId)).getDescriptiveName()}) %>'
			showWhenSingleIcon="<%= true %>"
		>

			<%
			for (Map.Entry<String, PortletURL> entry : addPortletURLs.entrySet()) {
				String className = entry.getKey();
				String message = "model.resource." + className;

				if (className.contains(StringPool.UNDERLINE)) {
					message = className.substring(className.indexOf(StringPool.UNDERLINE) + 1, className.length());
					className = className.substring(0, className.indexOf(StringPool.UNDERLINE));
				}

				PortletURL addPortletURL = entry.getValue();

				addPortletURL.setParameter("groupId", String.valueOf(groupId));

				String addPortletURLString = addPortletURL.toString();

				addPortletURLString = HttpUtil.addParameter(addPortletURLString, "doAsGroupId", groupId);
				addPortletURLString = HttpUtil.addParameter(addPortletURLString, "refererPlid", plid);

				String taglibEditURL = "javascript:Liferay.Util.openWindow({id: '" + renderResponse.getNamespace() + "', title: '" + LanguageUtil.get(pageContext, "model.resource." + className) + "', uri:'" + addPortletURLString + "'});";

				AssetRendererFactory assetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(className);
			%>

				<liferay-ui:icon
					message='<%= message %>'
					src="<%= assetRendererFactory.getIconPath(renderRequest) %>"
					url='<%= taglibEditURL %>'
				/>

			<%
			}
			%>

		</liferay-ui:icon-menu>
	</div>
</c:if>

<%!
public PortletURL getAddPortletURL(RenderRequest renderRequest, RenderResponse renderResponse, String className, String structureId, long[] allAssetCategoryIds, String[] allAssetTagNames) throws Exception {
	ThemeDisplay themeDisplay = (ThemeDisplay)renderRequest.getAttribute(WebKeys.THEME_DISPLAY);

	AssetRendererFactory assetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(className);

	PortletURL addPortletURL = null;

	if (assetRendererFactory != null) {
		addPortletURL = assetRendererFactory.getURLAdd((LiferayPortletRequest)renderRequest, (LiferayPortletResponse)renderResponse);

		if (addPortletURL != null) {
			addPortletURL.setWindowState(LiferayWindowState.POP_UP);

			addPortletURL.setPortletMode(PortletMode.VIEW);

			PortletURL redirectURL = renderResponse.createRenderURL();

			redirectURL.setWindowState(LiferayWindowState.POP_UP);

			redirectURL.setParameter("struts_action", "/asset_publisher/add_asset_redirect");

			addPortletURL.setParameter("redirect", HtmlUtil.escapeURL(redirectURL.toString()));

			String referringPortletResource = ParamUtil.getString(renderRequest, "portletResource");

			if (Validator.isNotNull(referringPortletResource)) {
				addPortletURL.setParameter("referringPortletResource", referringPortletResource);
			}
			else {
				PortletDisplay portletDisplay = themeDisplay.getPortletDisplay();

				addPortletURL.setParameter("referringPortletResource", portletDisplay.getId());

				addPortletURL.setParameter("assetCategoryIds", StringUtil.merge(allAssetCategoryIds));
				addPortletURL.setParameter("assetTagNames", StringUtil.merge(allAssetTagNames));

				if (Validator.isNotNull(structureId)) {
					addPortletURL.setParameter("structureId", structureId);
				}
			}
		}
	}

	return addPortletURL;
}

public Map<String, PortletURL> getAddPortletURLs(RenderRequest renderRequest, RenderResponse renderResponse, long[] classNameIds, long[] allAssetCategoryIds, String[] allAssetTagNames) throws Exception {
	ThemeDisplay themeDisplay = (ThemeDisplay)renderRequest.getAttribute(WebKeys.THEME_DISPLAY);

	Map<String, PortletURL> addPortletURLs = new TreeMap<String, PortletURL>(new ModelResourceComparator(themeDisplay.getLocale()));

	ClassName className = null;
	
	for (long classNameId : classNameIds) {
		className = ClassNameServiceUtil.getClassName(classNameId);

		PortletURL addPortletURL = getAddPortletURL(renderRequest, renderResponse, className.getValue(), StringPool.BLANK, allAssetCategoryIds, allAssetTagNames);

		if (addPortletURL != null) {
			addPortletURLs.put(className.getValue(), addPortletURL);
		}
	}

	// Web content types

	List<JournalStructure> webContentTypes = JournalStructureLocalServiceUtil.getWebContentTypes(themeDisplay.getScopeGroupId());

	className = ClassNameServiceUtil.getClassName(JournalArticle.class.getName());

	Iterator it = webContentTypes.listIterator();

	while (it.hasNext()) {
		JournalStructure webContentType = (JournalStructure) it.next();

		PortletURL addPortletURL = getAddPortletURL(renderRequest, renderResponse, className.getValue(), webContentType.getStructureId(), allAssetCategoryIds, allAssetTagNames);

		if (addPortletURL != null) {
			addPortletURLs.put(className.getValue() + StringPool.UNDERLINE + webContentType.getName(), addPortletURL);
		}
	}

	return addPortletURLs;
}
%>