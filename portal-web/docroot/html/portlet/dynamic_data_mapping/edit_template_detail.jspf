<%--
/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
if (Validator.isNull(script)) {
	script = structure.getXsd();
}

Set<String> fieldNames = structure.getFieldNames();

JSONArray readOnlyAttributesJSONArray = JSONFactoryUtil.createJSONArray();

readOnlyAttributesJSONArray.put("label");
readOnlyAttributesJSONArray.put("name");
readOnlyAttributesJSONArray.put("options");
readOnlyAttributesJSONArray.put("predefinedValue");
readOnlyAttributesJSONArray.put("required");
readOnlyAttributesJSONArray.put("showLabel");

JSONArray structureAvailableFieldsJSONArray = JSONFactoryUtil.createJSONArray();

Iterator<String> itr = fieldNames.iterator();

while (itr.hasNext()) {
	String fieldName = itr.next();

	StringBundler sb = new StringBundler(5);

	sb.append(structure.getFieldLabel(fieldName));
	sb.append(CharPool.SPACE);
	sb.append(CharPool.OPEN_PARENTHESIS);
	sb.append(structure.getFieldDataType(fieldName));
	sb.append(CharPool.CLOSE_PARENTHESIS);

	JSONObject fieldJSONObject = JSONFactoryUtil.createJSONObject();

	fieldJSONObject.put("fieldLabel", fieldName);
	fieldJSONObject.put("key", fieldName);
	fieldJSONObject.put("label", sb.toString());
	fieldJSONObject.put("readOnlyAttributes", readOnlyAttributesJSONArray);
	fieldJSONObject.put("type", structure.getFieldType(fieldName));
	fieldJSONObject.put("unique", true);

	if (structure.getFieldRequired(fieldName)) {
		fieldJSONObject.put("fixed", true);
	}

	structureAvailableFieldsJSONArray.put(fieldJSONObject);
}
%>

<aui:input name="language" type="hidden" value="xsd" />
<aui:input name="script" type="hidden" />

<aui:script use="liferay-portlet-dynamic-data-mapping">
	window.<portlet:namespace />structureAvailableFields = A.Array(<%= structureAvailableFieldsJSONArray.toString() %>).concat(Liferay.FormBuilder.AVAILABLE_FIELDS.DDM_TEMPLATE);

	Liferay.provide(
		window,
		'<portlet:namespace />saveTemplate',
		function() {
			document.<portlet:namespace />fm.<portlet:namespace />script.value = window.<portlet:namespace />formBuilder.getXSD();

			submitForm(document.<portlet:namespace />fm);
		},
		['aui-base']
	);

	<c:if test="<%= Validator.isNotNull(callback) && Validator.isNotNull(structureKey) %>">
		window.parent.<%= HtmlUtil.escapeJS(callback) %>('<%= HtmlUtil.escapeJS(structureKey) %>');
	</c:if>
</aui:script>