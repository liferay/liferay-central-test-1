<%--
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%@ include file="/html/portlet/dynamic_data_mapping/custom_fields.jspf" %>

<%
String[] availableLanguageIds = LocalizationUtil.getAvailableLocales(script);

Locale[] availableLocales = new Locale[availableLanguageIds.length];

for (int i = 0; i < availableLanguageIds.length; i++) {
	availableLocales[i] = LocaleUtil.fromLanguageId(availableLanguageIds[i]);
}

String defaultLanguageId = LocalizationUtil.getDefaultLocale(script);
%>

<div class="separator"><!-- --></div>

<div class="aui-helper-hidden lfr-message-response portlet-msg-error" id="<portlet:namespace />messageContainer"></div>

<%
	Locale[] locales = LanguageUtil.getAvailableLocales();
%>

<liferay-ui:tabs
	names='<%= LanguageUtil.get(pageContext, "view") + "," + LanguageUtil.get(pageContext, "source") %>'
	refresh="<%= false %>"
>
	<liferay-ui:section>
		<div id="<portlet:namespace />formBuilderTab">

			<aui:translation-manager
				availableLocales="<%= availableLocales %>"
				defaultLanguageId="<%= defaultLanguageId %>"
				id="translationManager"
				initialize="<%= false %>"
				readOnly="<%= false %>"
			/>

			<div class="aui-diagram-builder" id="<portlet:namespace />formBuilder">
				<div class="aui-diagram-builder-content aui-helper-clearfix" id="<portlet:namespace />formBuilderContent">
					<div class="aui-diagram-builder-tabs">
						<div class="aui-diagram-builder-tabs-content">
							<ul class="aui-tabview-list aui-widget-hd">
								<li class="aui-state-active aui-state-default aui-tab aui-tab-active">
									<span class="aui-tab-content">
										<a class="aui-tab-label" href="javascript:;">
											<liferay-ui:message key="fields" />
										</a>
									</span>
								</li>
								<li class="aui-state-default aui-tab">
									<span class="aui-tab-content">
										<a class="aui-tab-label" href="javascript:;">
											<liferay-ui:message key="settings" />
										</a>
									</span>
								</li>
							</ul>

							<div class="aui-tabview-content aui-widget-bd">
								<div class="aui-tabview-content-item"></div>

								<div class="aui-helper-hidden aui-tabview-content-item"></div>
							</div>
						</div>
					</div>

					<div class="aui-diagram-builder-content-container"></div>
				</div>
			</div>
		</div>
	</liferay-ui:section>

	<liferay-ui:section>
		<div class="aui-form-builder-source-wrapper" id="<portlet:namespace />formBuilderSourceWrapper">
			<div class="aui-form-builder-source" id="<portlet:namespace />formBuilderEditor"></div>
		</div>
	</liferay-ui:section>
</liferay-ui:tabs>

<%
JSONArray availableLocalesJSONArray = JSONFactoryUtil.createJSONArray();

for (int i = 0; i < availableLocales.length; i++) {
	availableLocalesJSONArray.put(LanguageUtil.getLanguageId(availableLocales[i]));
}

JSONObject localesMapJSONObject = JSONFactoryUtil.createJSONObject();

for (int i = 0; i < locales.length; i++) {
	localesMapJSONObject.put(LocaleUtil.toLanguageId(locales[i]), locales[i].getDisplayName(locale));
}
%>

<aui:script use="aui-datepicker,event-custom-base,json,liferay-portlet-dynamic-data-lists,liferay-portlet-dynamic-data-mapping,liferay-portlet-dynamic-data-mapping-custom-fields,aui-tabs,aui-ace-editor,aui-loading-mask,liferay-xml-formatter">
	var Lang = A.Lang;

	var MESSAGE_FAILURE = 0;

	var MESSAGE_SUCCESS = 1;

	var CSS_MESSAGE_ERROR = 'portlet-msg-error';

	var CSS_MESSAGE_SUCCESS = 'portlet-msg-success';

	var SELECTOR_FORMBUILDER_SOURCE = '#<portlet:namespace />formBuilderSourceWrapper';

	var SELECTOR_MESSAGE_CONTAINER = '#<portlet:namespace />messageContainer';

	var STR_ACTIVE = 'active';

	var STR_VALUE = 'value';

	var availableFields;

	var formEditor;

	var xmlFormatter;

	var afterShowTab = function(event) {
		if (isViewTabActive()) {
			switchToView();
		}
		else {
			switchToSource();
		}
	};

	var displayMessage = function(type, message) {
		var messageContainer = A.one(SELECTOR_MESSAGE_CONTAINER);

		messageContainer.removeClass(CSS_MESSAGE_SUCCESS).removeClass(CSS_MESSAGE_ERROR);

		var messageClass = MESSAGE_SUCCESS;

		if (type === MESSAGE_FAILURE) {
			messageClass = CSS_MESSAGE_ERROR;
		}

		messageContainer.addClass(messageClass);

		messageContainer.html(message);

		messageContainer.show();
	};

	var getFormEditor = function() {
		if (!formEditor) {
			formEditor = new A.AceEditor(
				{
					boundingBox: '#<portlet:namespace />formBuilderEditor',
					height: 600,
					mode: 'xml',
					tabSize: 4,
					width: 600
				}
			).render();
		}

		return formEditor;
	};

	var getLoadingMask = function(node) {
		node = node || A.one('#<portlet:namespace />formBuilderTab');

		node.plug(
			A.LoadingMask,
			{
				background: '#000'
			}
		);

		return node.loadingmask;
	};

	var getXMLFormatter = function() {
		if (!xmlFormatter) {
			xmlFormatter = new Liferay.XMLFormatter();
		}

		return xmlFormatter;
	};

	var hideLoadingMask = function(node) {
		setLoadingMask(node, false);
	};

	var isViewTabActive = function() {
		return !A.one('#<portlet:namespace />formBuilderTab').get('parentNode').hasClass('aui-helper-hidden');
	};

	var onFormBuilderDataFailure = function(message) {
		displayMessage(MESSAGE_FAILURE, Liferay.Language.get('your-request-failed-to-complete'));
	};

	var onFormBuilderDataSuccess = function(event) {
		var instance = this;

		var responseData = instance.get('responseData');

		if (Lang.isArray(responseData)) {
			formBuilder.set('fields', responseData);
		}
		else if(Lang.isObject(responseData)) {
			displayMessage(MESSAGE_FAILURE, responseData.exception);
		}

		hideLoadingMask();
	};

	var reloadFormBuilderData = function(content) {
		showLoadingMask();

		if (!Lang.isValue(content)) {
			content = window.<portlet:namespace />getContentXSD();
		}

		content = xmlFormatter.minimize(content);

		A.io.request(
			themeDisplay.getPathContext() + themeDisplay.getPathMain() + '/dynamic_data_mapping/get_structure_json',
			{
				data: {
					xsd: content
				},
				dataType: 'json',
				on: {
					failure: onFormBuilderDataFailure,
					success: onFormBuilderDataSuccess
				}
			}
		);
	};

	var setEditorSize = function() {
		if (!isViewTabActive()) {
			formEditor.set('width', A.one(SELECTOR_FORMBUILDER_SOURCE).get('clientWidth'));
		}
	}

	var setLoadingMask = function(node, visible) {
		var loadingMask = getLoadingMask(node);

		if (visible) {
			loadingMask.show();
		}
		else {
			loadingMask.hide();
		}
	};

	var showLoadingMask = function(node) {
		setLoadingMask(node, true);
	};

	var switchToSource = function() {
		formEditor = getFormEditor();

		setEditorSize();

		xmlFormatter = getXMLFormatter();

		var content = formBuilder.getXSD();

		content = xmlFormatter.format(content);

		formEditor.set(STR_VALUE, content);
	};

	var switchToView = function() {
		reloadFormBuilderData(formEditor.get(STR_VALUE));
	};

	<c:if test="<%= Validator.isNotNull(scopeAvailableFields) %>">
		availableFields = A.Object.getValue(window, '<%= HtmlUtil.escapeJS(scopeAvailableFields) %>'.split('.'));

		if (A.Lang.isFunction(availableFields)) {
			availableFields = availableFields(A, Liferay.FormBuilder);
		}
	</c:if>

	var formBuilder = new Liferay.FormBuilder(
		{
			availableFields: availableFields,
			boundingBox: '#<portlet:namespace />formBuilder',
			enableEditing: false,

			<c:if test="<%= scriptJSONArray != null %>">
				fields: <%= scriptJSONArray.toString() %>,
			</c:if>

			portletNamespace: '<portlet:namespace />',
			portletResourceNamespace: '<%= HtmlUtil.escapeJS(portletResourceNamespace) %>',

			translationManager: {

				<c:if test="<%= availableLocalesJSONArray.length() > 0 %>">
					availableLocales: <%= availableLocalesJSONArray.toString() %>,
				</c:if>

				boundingBox: '#<portlet:namespace />translationManager',
				defaultLocale: '<%= defaultLanguageId %>',
				localesMap: <%= localesMapJSONObject.toString() %>,
				srcNode: '#<portlet:namespace />translationManager .lfr-translation-manager-content'
			},

			srcNode: '#<portlet:namespace />formBuilderContent'
		}
	).render();

	Liferay.Util.getWindow().after('widthChange', setEditorSize);

	Liferay.after('showTab', afterShowTab);

	window.<portlet:namespace />formBuilder = formBuilder;
	
	window.<portlet:namespace />getContentXSD = function() {
		var content;

		if (formEditor && formBuilderTabs && formBuilderTabs.getTab(1).get(STR_ACTIVE)) {
			content = formEditor.get(STR_VALUE);
		}
		else {
			content = formBuilder.getXSD();
		}

		return content;
	};

	Liferay.fire(
		'<portlet:namespace />formBuilderLoaded',
		{
			formBuilder: formBuilder
		}
	);
</aui:script>