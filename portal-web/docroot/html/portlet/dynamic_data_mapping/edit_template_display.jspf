<%--
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
String scriptContent = ParamUtil.getString(request, "scriptContent");

if (Validator.isNotNull(scriptContent)) {
	script = scriptContent;
}

String editorType = ParamUtil.getString(request, "editorType");

if (Validator.isNotNull(editorType)) {
	portalPreferences.setValue(PortletKeys.DYNAMIC_DATA_MAPPING, "editor-type", editorType);
}
else {
	editorType = portalPreferences.getValue(PortletKeys.DYNAMIC_DATA_MAPPING, "editor-type", "rich");
}

boolean useRichEditor = editorType.equals("rich");
%>

<aui:input name="scriptContent" type="hidden" value="<%= script %>" />

<liferay-ui:panel-container extended="<%= false %>" id="templateScriptContainer" persistState="<%= true %>">
	<liferay-ui:panel collapsible="<%= true %>" extended="<%= false %>" id="templateScriptSectionPanel" persistState="<%= true %>" title="script">
		<div class="editor-toolbar">
			<aui:select cssClass="language-type" inlineField="<%= true %>" label="" name="language" title="language-type">

				<%
				for (String curLangType : supportedLanguageTypes) {
					StringBundler sb = new StringBundler(6);

					sb.append(LanguageUtil.get(pageContext, curLangType + "[stands-for]"));
					sb.append(StringPool.SPACE);
					sb.append(StringPool.OPEN_PARENTHESIS);
					sb.append(StringPool.PERIOD);
					sb.append(curLangType);
					sb.append(StringPool.CLOSE_PARENTHESIS);
				%>

					<aui:option label="<%= sb.toString() %>" selected="<%= language.equals(curLangType) %>" value="<%= curLangType %>" />

				<%
				}
				%>

			</aui:select>

			<aui:select cssClass="editor-type" inlineField="<%= true %>" name="editorType">
				<aui:option label="rich" selected="<%= useRichEditor %>" value="rich" />
				<aui:option label="plain" selected="<%= !useRichEditor %>" value="plain" />
			</aui:select>
		</div>
		
		<div class="lfr-template-editor-container">
			<%
			String cssClassPalette = "lfr-template-palette-container";

			if (!language.equalsIgnoreCase("ftl")) {
				cssClassPalette += " aui-helper-hidden";
			}
			%>

			<div class="<%= cssClassPalette %>" id="<portlet:namespace />templatePaletteContainer">
				<div class="minimize-panels" id="<portlet:namespace />paletteToggler">
					<a href="javascript:;">
						<span><liferay-ui:message key="minimize-panels" /></span>
					</a>
				</div>

				<div class="lfr-template-palette" id="<portlet:namespace />paletteDataContainer">
					<div id="<portlet:namespace />paletteData">
						<div>
							<div class="palette-item-header aui-toggler-header-expanded">
								<span class="palette-item-header-icon"></span>
								<span>Fields</span>
							</div>
							<ul class="palette-item-content">
								<li class="palette-item-container">
									<span class="palette-item" data-content1="<#list animals as being>" data-content2="</#list>" title="This is an example tooltip.<br>It will provide useful information<br>For more information, click &lt;a href=&quot;liferay.com&quot; target=&quot;blank&quot;&gt;here&lt;/a&gt;">Picture</span>
								</li>
								<li class="palette-item-container">
									<span class="palette-item"
										data-content1="<#list animals as being>"
										data-content2="<li>\${being.name} for \${being.price} Euros"
										data-content3="</#list>" title="Test123">Link</span>
								</li>
								<li class="palette-item-container">
									<span class="palette-item" title="Test123">Preference</span>
								</li>
								<li class="palette-item-container">
									<span class="palette-item" title="Test123">Collection</span>
								</li>
								<li class="palette-item-container">
									<span class="palette-item" title="Test123">Email</span>
								</li>
							</ul>
						</div>
						<div>
							<div class="palette-item-header aui-toggler-header-expanded">
								<span class="palette-item-header-icon"></span>
								<span>Variables</span>
							</div>
							<ul class="palette-item-content">
								<li class="palette-item-container">
									<span class="palette-item" title="Test123">themeDsiplay</span>
								</li>
								<li class="palette-item-container">
									<span class="palette-item" title="Test123">request</span>
								</li>
								<li class="palette-item-container">
									<span class="palette-item" title="Test123">serviceLocator</span>
								</li>
							</ul>
						</div>
					</div>
				</div>
			</div>
	
			<div class="lfr-editor-container lfr-editor-container-full" id="<portlet:namespace />editorContainer">
				<div class="lfr-plain-editor <%= useRichEditor ? "aui-helper-hidden" : StringPool.BLANK %>" id="<portlet:namespace />plainEditor">
					<aui:input cssClass="lfr-template-editor" inputCssClass="lfr-editor-textarea" label="" name="plainEditorField" onKeyDown="Liferay.Util.checkTab(this); Liferay.Util.disableEsc();" type="textarea" value="" wrap="off" />
				</div>

				<div class="lfr-rich-editor <%= !useRichEditor ? "aui-helper-hidden" : StringPool.BLANK %>" id="<portlet:namespace />richEditor"></div>
			</div>
		</div>

		<aui:input label="script-file" name="script" type="file" />
	</liferay-ui:panel>
</liferay-ui:panel-container>

<aui:script use="aui-ace-autocomplete-freemarker,aui-ace-autocomplete-plugin,aui-toggler,aui-tooltip,event-mouseenter,transition">
	var Util = Liferay.Util;

	var AObject = A.Object;

	var CSS_HIDDEN = 'aui-helper-hidden';

	var CSS_EDITOR_CONTAINER_FULL = 'lfr-editor-container-full';

	var CSS_EDITOR_CONTAINER_PALETTE_MINIMIZED = 'lfr-editor-container-palette-minimized';

	var CSS_PALETTE_CONTAINER_MINIMIZED = 'lfr-template-palette-container-minimized';

	var editorType = '<%= HtmlUtil.escapeJS(editorType) %>';

	var panelScriptContainer = A.one('#templateScriptContainer');

	var plainEditorField = panelScriptContainer.one('#<portlet:namespace />plainEditorField');

	var selectLanguageNode = panelScriptContainer.one('#<portlet:namespace />language');

	var paletteContainer = panelScriptContainer.one('#<portlet:namespace />templatePaletteContainer');

	var paletteDataContainer = panelScriptContainer.one('#<portlet:namespace />paletteDataContainer');

	var paletteDataNode = panelScriptContainer.one('#<portlet:namespace />paletteData');

	var paletteToggler = panelScriptContainer.one('#<portlet:namespace />paletteToggler');

	var paletteTogglerLink = paletteToggler.one('a');

	var editorContainer = panelScriptContainer.one('#<portlet:namespace />editorContainer');

	var selectLanguageNode = panelScriptContainer.one('#<portlet:namespace />language');

	var richEditor;

	var prevEditorContent;

	var paletteMouseEnterLeaveHandles;

	var eventOpacities = {
		mouseenter: 1,
		mouseleave: 0
	};

	function attachPaletteMouseEnterLeave() {
		paletteMouseEnterLeaveHandles = paletteContainer.on(['mouseenter', 'mouseleave'], togglePaletteAction);
	}

	function detachPaletteMouseEnterLeave() {
		if (paletteMouseEnterLeaveHandles) {
			paletteMouseEnterLeaveHandles.detach();
		}
	}

	function getEditorContent(type) {
		var content = '';

		if (type == 'plain') {
			content = plainEditorField.val();
		}
		else {
			content = richEditor.getSession().getValue();
		}

		return content;
	}

	function getSelectedLanguage() {
		return selectLanguageNode.one('option:selected').val();
	}

	function hidePalette() {
		paletteContainer.addClass(CSS_HIDDEN);

		editorContainer.addClass(CSS_EDITOR_CONTAINER_FULL);
	}

	function onPaletteItemChosen(event) {
		var editor = richEditor.getEditor();

		var item = event.currentTarget;

		var contentAttrs = Util.getAttributes(item, "data-content");

		var curCursorPosition;

		var processed;

		AObject.each(
			contentAttrs,
			function(item, index) {
				if (processed) {
					editor.insert('\n');

					curCursorPosition = editor.getCursorPosition();

					editor.insert('\n');
				}

				processed = true;

				editor.insert(item);
			}
		);

		if (curCursorPosition) {
			editor.moveCursorToPosition(curCursorPosition);
		}

		editor.focus();
	}

	function minimizePalette() {
		paletteDataNode.remove();

		detachPaletteMouseEnterLeave();

		paletteContainer.transition(
			{
				duration: 0.5,
				width: '13px'
			},
			function() {
				paletteContainer.addClass(CSS_PALETTE_CONTAINER_MINIMIZED);

				editorContainer.addClass(CSS_EDITOR_CONTAINER_PALETTE_MINIMIZED);

				paletteToggler.setStyle('opacity', '1');
			}
		);
	}

	function maximizePalette() {
		editorContainer.removeClass(CSS_EDITOR_CONTAINER_PALETTE_MINIMIZED);

		paletteContainer.transition(
			{
				duration: 0.5,
				width: '200px'
			},
			function() {
				paletteContainer.removeClass(CSS_PALETTE_CONTAINER_MINIMIZED);

				paletteDataContainer.appendChild(paletteDataNode);

				attachPaletteMouseEnterLeave();
			}
		);
	}

	function onTemplateLanguageChange(event) {
		updatePalette(event);

		updateEditorPlugins(event);
	}

	function setEditorContent(type, content) {
		if (type == 'plain') {
			plainEditorField.val(content);
		}
		else {
			richEditor.getSession().setValue(content);
		}

		prevEditorContent = content;
	}

	function showPalette() {
		editorContainer.removeClass(CSS_EDITOR_CONTAINER_FULL);

		paletteContainer.removeClass(CSS_HIDDEN);
	}

	function togglePalette() {
		if (paletteContainer.hasClass(CSS_PALETTE_CONTAINER_MINIMIZED)) {
			maximizePalette();
		}
		else {
			minimizePalette();
		}
	}

	function togglePaletteAction(event) {
		var opacity = 0;

		if (!paletteContainer.hasClass(CSS_PALETTE_CONTAINER_MINIMIZED)) {
			if (event) {
				opacity = eventOpacities[event.type];
			}

			paletteToggler.transition(
				{
					opacity: opacity
				}
			);
		}
	}

	function updateEditorPlugins(event) {
		var selectedOptionValue = getSelectedLanguage();

		if (selectedOptionValue === 'ftl') {
			richEditor.plug(
				A.Plugin.AceAutoComplete,
				{
					processor: new A.AceEditor.AutoCompleteFreemarker(
						{
							variables: <%= DDMTemplateHelperUtil.getAutocompleteJSON(request) %>
						}
					),
					render: true,
					visible: false,
					width: 250,
					zIndex: 10000
				}
			);
		}
		else {
			richEditor.unplug(A.Plugin.AceAutoComplete);
		}
	}

	function updateEditorType(event) {
		var oldEditorType = editorType;

		var newEditorType = panelScriptContainer.one('#<portlet:namespace />editorType').val();

		var oldEditorContent = getEditorContent(oldEditorType);

		setEditorContent(newEditorType, oldEditorContent);

		var richEditorType = (newEditorType != 'plain');

		panelScriptContainer.one('#<portlet:namespace />plainEditor').toggle(!richEditorType);
		panelScriptContainer.one('#<portlet:namespace />richEditor').toggle(richEditorType);

		if (richEditorType) {
			hidePalette();

			richEditor.editor.resize();
		}
		else {
			showPalette();
		}

		A.io.request('<portlet:renderURL><portlet:param name="struts_action" value="/dynamic_data_mapping/edit_template_display" /></portlet:renderURL>&editorType=' + newEditorType);

		editorType = newEditorType;
	}

	function updatePalette() {
		var selectedLanguage = getSelectedLanguage();

		if (selectedLanguage === 'ftl') {
			showPalette();
		}
		else {
			hidePalette();
		}
	}

	<%
	String langType = ParamUtil.getString(request, "langType");
	%>

	A.on(
		'domready',
		function(event) {
			richEditor = new A.AceEditor(
				{
					boundingBox: '#<portlet:namespace />richEditor',
					width: '100%',
					height: '400',
					mode: '<%= EditorUtil.getEditorMode(langType) %>'
				}
			).render();

			var editorContentElement = panelScriptContainer.one('#<portlet:namespace />scriptContent');

			if (editorContentElement) {
				setEditorContent(editorType, editorContentElement.val());
			}

			panelScriptContainer.one('#<portlet:namespace />editorType').on('change', updateEditorType);

			Liferay.on(
				'<portlet:namespace />saveTemplate',
				function(event) {
					editorContentElement.val(getEditorContent());
				}
			);

			selectLanguageNode.on('change', onTemplateLanguageChange);

			updateEditorPlugins();

			paletteContainer.delegate('click', onPaletteItemChosen, '.palette-item');

			attachPaletteMouseEnterLeave();

			paletteToggler.on('click', togglePalette);

			var togglerDelegate = new A.TogglerDelegate(
				{
					animated: true,
					container: paletteDataContainer,
					content: '.palette-item-content',
					header: '.palette-item-header'
				}
			);

			var t1 = new A.Tooltip(
				{
					align: { points: [ 'bl', 'tr' ] },
					title: true,
					trigger: '.palette-item'
				}
			).render(paletteContainer);
		},
		'#<portlet:namespace />richEditor'
	);
</aui:script>