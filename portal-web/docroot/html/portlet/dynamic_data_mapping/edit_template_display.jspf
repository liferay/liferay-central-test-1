<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
String scriptContent = ParamUtil.getString(request, "scriptContent");

if (Validator.isNotNull(scriptContent)) {
	script = scriptContent;
}

String editorType = ParamUtil.getString(request, "editorType");

if (Validator.isNotNull(editorType)) {
	portalPreferences.setValue(PortletKeys.DYNAMIC_DATA_MAPPING, "editor-type", editorType);
}
else {
	editorType = portalPreferences.getValue(PortletKeys.DYNAMIC_DATA_MAPPING, "editor-type", "rich");
}

boolean useRichEditor = editorType.equals("rich");

Map<String, TemplateVariableGroup> templateVariableGroups = Collections.emptyMap();

if (template != null) {
	templateVariableGroups = TemplateContextHelper.getTemplateVariableGroups(template.getClassNameId(), classPK);
}
else if (classNameId > 0) {
	templateVariableGroups = TemplateContextHelper.getTemplateVariableGroups(classNameId, classPK);
}
%>

<aui:input name="scriptContent" type="hidden" value="<%= script %>" />

<liferay-ui:panel-container extended="<%= false %>" id="templateScriptContainer" persistState="<%= true %>">
	<liferay-ui:panel collapsible="<%= true %>" extended="<%= false %>" id="templateScriptSectionPanel" persistState="<%= true %>" title="script">
		<div class="editor-toolbar">
			<aui:select cssClass="language-type" inlineField="<%= true %>" label="" name="language" title="language-type">

				<%
				for (String curLangType : supportedLanguageTypes) {
					StringBundler sb = new StringBundler(6);

					sb.append(LanguageUtil.get(pageContext, curLangType + "[stands-for]"));
					sb.append(StringPool.SPACE);
					sb.append(StringPool.OPEN_PARENTHESIS);
					sb.append(StringPool.PERIOD);
					sb.append(curLangType);
					sb.append(StringPool.CLOSE_PARENTHESIS);
				%>

					<aui:option label="<%= sb.toString() %>" selected="<%= language.equals(curLangType) %>" value="<%= curLangType %>" />

				<%
				}
				%>

			</aui:select>

			<aui:select cssClass="editor-type" inlineField="<%= true %>" name="editorType">
				<aui:option label="rich" selected="<%= useRichEditor %>" value="rich" />
				<aui:option label="plain" selected="<%= !useRichEditor %>" value="plain" />
			</aui:select>
		</div>

		<div class="lfr-template-editor-container">
			<c:if test="<%= !templateVariableGroups.isEmpty() %>">
				<div class="lfr-template-palette-container<%= !language.equalsIgnoreCase("ftl") ? " aui-helper-hidden" : "" %>" id="<portlet:namespace />templatePaletteContainer">
					<div class="minimize-panels" id="<portlet:namespace />paletteToggler">
						<a href="javascript:;">
							<span><liferay-ui:message key="minimize-panels" /></span>
						</a>
					</div>

					<div class="lfr-template-palette" id="<portlet:namespace />paletteDataContainer">
						<div id="<portlet:namespace />paletteData">

							<%
							for (TemplateVariableGroup templateVariableGroup : templateVariableGroups.values()) {
							%>

								<div class="palette-section">
									<div class="palette-item-header aui-toggler-header-expanded">
										<span class="palette-item-header-icon"></span>

										<span><liferay-ui:message key="<%= templateVariableGroup.getLabel() %>" /></span>
									</div>

									<ul class="palette-item-content">

										<%
										for (TemplateVariableDefinition templateVariableDefinition : templateVariableGroup.getTemplateVariableDefinitions()) {
											String dataContent1 = "${" + templateVariableDefinition.getName() + "}";
											String dataContent2 = StringPool.BLANK;

											if (templateVariableDefinition.isCollection()) {
												TemplateVariableDefinition itemTemplateVariableDefinition = templateVariableDefinition.getItemTemplateVariableDefinition();

												dataContent1 = "<#list " + itemTemplateVariableDefinition.getName() + " as " + templateVariableDefinition.getName() + ">";
												dataContent2 = "</#list>";
											}
										%>

											<li class="palette-item-container">
												<span class="palette-item" data-content1="<%= dataContent1 %>" <c:if test="<%= Validator.isNotNull(dataContent2) %>">data-content2="<%= dataContent2 %>"</c:if> title="<%= HtmlUtil.escapeAttribute(_getPaletteItemTitle(pageContext, templateVariableDefinition)) %>">
													<liferay-ui:message key="<%= templateVariableDefinition.getLabel() %>" />
												</span>
											</li>

										<%
										}
										%>

									</ul>
								</div>

							<%
							}
							%>

						</div>
					</div>
				</div>
			</c:if>

			<%
			String editorContainerClass = "lfr-editor-container";

			if (!language.equalsIgnoreCase("ftl")) {
				editorContainerClass += " lfr-editor-container-full";
			}
			%>

			<div class="<%= editorContainerClass %>" id="<portlet:namespace />editorContainer">
				<div class="lfr-plain-editor <%= useRichEditor ? "aui-helper-hidden" : StringPool.BLANK %>" id="<portlet:namespace />plainEditor">
					<aui:input cssClass="lfr-template-editor" inputCssClass="lfr-editor-textarea" label="" name="plainEditorField" onKeyDown="Liferay.Util.checkTab(this); Liferay.Util.disableEsc();" type="textarea" value="" wrap="off" />
				</div>

				<div class="lfr-rich-editor <%= !useRichEditor ? "aui-helper-hidden" : StringPool.BLANK %>" id="<portlet:namespace />richEditor"></div>
			</div>
		</div>

		<aui:input label="script-file" name="script" type="file" />
	</liferay-ui:panel>
</liferay-ui:panel-container>

<aui:script use="aui-ace-autocomplete-freemarker,aui-ace-autocomplete-plugin,aui-toggler,aui-tooltip,event-mouseenter,transition">
	var AObject = A.Object;
	var Util = Liferay.Util;

	var editorType = '<%= HtmlUtil.escapeJS(editorType) %>';

	var panelScriptContainer = A.one('#templateScriptContainer');

	var editorContainer = panelScriptContainer.one('#<portlet:namespace />editorContainer');
	var plainEditorField = panelScriptContainer.one('#<portlet:namespace />plainEditorField');
	var selectLanguageNode = panelScriptContainer.one('#<portlet:namespace />language');

	var prevEditorContent;
	var richEditor;

	<c:if test="<%= !templateVariableGroups.isEmpty() %>">
		var CSS_EDITOR_CONTAINER_FULL = 'lfr-editor-container-full';

		var CSS_EDITOR_CONTAINER_PALETTE_MINIMIZED = 'lfr-editor-container-palette-minimized';

		var CSS_PALETTE_CONTAINER_MINIMIZED = 'lfr-template-palette-container-minimized';

		var MAP_OPACITY = {
			mouseenter: 1,
			mouseleave: 0
		};

		var paletteToggler = panelScriptContainer.one('#<portlet:namespace />paletteToggler');

		var paletteContainer = panelScriptContainer.one('#<portlet:namespace />templatePaletteContainer');
		var paletteDataContainer = panelScriptContainer.one('#<portlet:namespace />paletteDataContainer');
		var paletteDataNode = panelScriptContainer.one('#<portlet:namespace />paletteData');
		var paletteTogglerLink = paletteToggler.one('a');

		var paletteHandle;

		function attachPaletteInteraction() {
			paletteHandle = paletteContainer.on(['mouseenter', 'mouseleave'], togglePaletteAction);
		}

		function detachPaletteInteraction() {
			if (paletteHandle) {
				paletteHandle.detach();
			}
		}

		function hidePalette() {
			paletteContainer.hide();

			editorContainer.addClass(CSS_EDITOR_CONTAINER_FULL);
		}

		function maximizePalette() {
			editorContainer.removeClass(CSS_EDITOR_CONTAINER_PALETTE_MINIMIZED);

			paletteContainer.transition(
				{
					duration: 0.5,
					width: '200px'
				},
				function() {
					paletteContainer.removeClass(CSS_PALETTE_CONTAINER_MINIMIZED);

					paletteDataContainer.appendChild(paletteDataNode);

					attachPaletteInteraction();
				}
			);
		}

		function minimizePalette() {
			paletteDataNode.remove();

			detachPaletteInteraction();

			paletteContainer.transition(
				{
					duration: 0.5,
					width: '13px'
				},
				function() {
					paletteContainer.addClass(CSS_PALETTE_CONTAINER_MINIMIZED);
					editorContainer.addClass(CSS_EDITOR_CONTAINER_PALETTE_MINIMIZED);

					paletteToggler.setStyle('opacity', '1');
				}
			);
		}

		function onPaletteItemChosen(event) {
			var editor = richEditor.getEditor();

			var item = event.currentTarget;

			var contentAttrs = Util.getAttributes(item, 'data-content');

			var cursorPos;
			var processed;

			AObject.each(
				contentAttrs,
				function(item, index) {
					if (processed) {
						editor.insert('\n');

						cursorPos = editor.getCursorPosition();

						editor.insert('\n');
					}

					processed = true;

					editor.insert(item);
				}
			);

			if (cursorPos) {
				editor.moveCursorToPosition(cursorPos);
			}

			editor.focus();
		}

		function showPalette() {
			editorContainer.removeClass(CSS_EDITOR_CONTAINER_FULL);

			paletteContainer.show();
		}

		function togglePaletteCollapse() {
			if (paletteContainer.hasClass(CSS_PALETTE_CONTAINER_MINIMIZED)) {
				maximizePalette();
			}
			else {
				minimizePalette();
			}
		}

		function togglePaletteAction(event) {
			if (!paletteContainer.hasClass(CSS_PALETTE_CONTAINER_MINIMIZED)) {
				var opacity = 0;

				if (event) {
					opacity = MAP_OPACITY[event.type];
				}

				paletteToggler.transition(
					{
						opacity: opacity
					}
				);
			}
		}

		function updatePalette() {
			if (getSelectedLanguage() === 'ftl') {
				showPalette();
			}
			else {
				hidePalette();
			}
		}
	</c:if>

	function getEditorContent(type) {
		var content = '';

		if (type == 'plain') {
			content = plainEditorField.val();
		}
		else {
			content = richEditor.getSession().getValue();
		}

		return content;
	}

	function getSelectedLanguage() {
		return selectLanguageNode.val();
	}

	function onTemplateLanguageChange(event) {
		<c:if test="<%= !templateVariableGroups.isEmpty() %>">
			updatePalette(event);
		</c:if>

		updateEditorPlugins(event);
	}

	function setEditorContent(type, content) {
		if (type == 'plain') {
			plainEditorField.val(content);
		}
		else {
			richEditor.getSession().setValue(content);
		}

		prevEditorContent = content;
	}

	function updateEditorPlugins(event) {
		var selectedOptionValue = getSelectedLanguage();

		if (selectedOptionValue === 'ftl') {
			richEditor.plug(
				A.Plugin.AceAutoComplete,
				{
					processor: new A.AceEditor.AutoCompleteFreemarker(
						{
							variables: <%= DDMTemplateHelperUtil.getAutocompleteJSON(request) %>
						}
					),
					render: true,
					visible: false,
					width: 250,
					zIndex: 10000
				}
			);
		}
		else {
			richEditor.unplug(A.Plugin.AceAutoComplete);
		}
	}

	function updateEditorType(event) {
		var oldEditorType = editorType;

		var newEditorType = panelScriptContainer.one('#<portlet:namespace />editorType').val();

		var oldEditorContent = getEditorContent(oldEditorType);

		setEditorContent(newEditorType, oldEditorContent);

		var richEditorType = (newEditorType != 'plain');

		panelScriptContainer.one('#<portlet:namespace />plainEditor').toggle(!richEditorType);
		panelScriptContainer.one('#<portlet:namespace />richEditor').toggle(richEditorType);

		if (richEditorType) {
			<c:if test="<%= !templateVariableGroups.isEmpty() %>">
				hidePalette();
			</c:if>

			richEditor.editor.resize();
		}
		<c:if test="<%= !templateVariableGroups.isEmpty() %>">
			else {
				showPalette();
			}
		</c:if>

		A.io.request('<portlet:renderURL><portlet:param name="struts_action" value="/dynamic_data_mapping/edit_template_display" /></portlet:renderURL>&editorType=' + newEditorType);

		editorType = newEditorType;
	}

	<%
	String langType = ParamUtil.getString(request, "langType");
	%>

	A.on(
		'domready',
		function(event) {
			richEditor = new A.AceEditor(
				{
					boundingBox: '#<portlet:namespace />richEditor',
					height: 400,
					mode: '<%= EditorUtil.getEditorMode(langType) %>',
					width: '100%'
				}
			).render();

			var editorContentElement = A.one('#<portlet:namespace />scriptContent');

			if (editorContentElement) {
				setEditorContent(editorType, editorContentElement.val());
			}

			panelScriptContainer.one('#<portlet:namespace />editorType').on('change', updateEditorType);

			Liferay.on(
				'<portlet:namespace />saveTemplate',
				function(event) {
					editorContentElement.val(getEditorContent());
				}
			);

			selectLanguageNode.on('change', onTemplateLanguageChange);

			updateEditorPlugins();

			<c:if test="<%= !templateVariableGroups.isEmpty() %>">
				paletteContainer.delegate('click', onPaletteItemChosen, '.palette-item');

				attachPaletteInteraction();

				paletteToggler.on('click', togglePaletteCollapse);

				var togglerDelegate = new A.TogglerDelegate(
					{
						animated: true,
						container: paletteDataContainer,
						content: '.palette-item-content',
						header: '.palette-item-header'
					}
				);

				var t1 = new A.Tooltip(
					{
						align: {
							points: ['bl', 'tr']
						},
						title: true,
						trigger: '.palette-item'
					}
				).render(paletteContainer);
			</c:if>
		},
		'#<portlet:namespace />richEditor'
	);
</aui:script>

<%!
private String _getPaletteItemTitle(PageContext pageContext, String label, Class<?> clazz) {
	StringBundler sb = new StringBundler();

	if (clazz == null) {
		return StringPool.BLANK;
	}

	String className = clazz.getName();

	sb.append("<br />");
	sb.append(LanguageUtil.get(pageContext, label));
	sb.append(StringPool.COLON);
	sb.append("&nbsp;");

	String javadocURL = null;

	if (className.startsWith("com.liferay")) {
		javadocURL = "http://docs.liferay.com/portal/6.1/javadocs/";
	}

	if (Validator.isNotNull(javadocURL)) {
		sb.append("<a href=\"");
		sb.append(javadocURL);
		sb.append(StringUtil.replace(className, StringPool.PERIOD, StringPool.SLASH));
		sb.append(".html\" target=\"_blank\">");
	}

	sb.append(clazz.getSimpleName());

	if (Validator.isNull(javadocURL)) {
		sb.append("</a>");
	}

	return sb.toString();
}

private String _getPaletteItemTitle(PageContext pageContext, TemplateVariableDefinition templateVariableDefinition) {
	StringBundler sb = new StringBundler();

	sb.append("<p>");
	sb.append(LanguageUtil.get(pageContext, templateVariableDefinition.getLabel() + "-help"));
	sb.append("</p>");
	sb.append(LanguageUtil.get(pageContext, "variable"));
	sb.append(StringPool.COLON);
	sb.append("&nbsp;");
	sb.append(templateVariableDefinition.getName());
	sb.append(_getPaletteItemTitle(pageContext, "class", templateVariableDefinition.getClazz()));

	if (templateVariableDefinition.isCollection()) {
		TemplateVariableDefinition itemTemplateVariableDefinition = templateVariableDefinition.getItemTemplateVariableDefinition();

		sb.append(_getPaletteItemTitle(pageContext, "items-class", itemTemplateVariableDefinition.getClazz()));
	}

	return sb.toString();
}
%>