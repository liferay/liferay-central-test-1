<%--
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
String scriptContent = ParamUtil.getString(request, "scriptContent");

if (Validator.isNotNull(scriptContent)) {
	script = scriptContent;
}

String langType = ParamUtil.getString(request, "langType");

String editorType = ParamUtil.getString(request, "editorType");

if (Validator.isNotNull(editorType)) {
	portalPreferences.setValue(PortletKeys.DYNAMIC_DATA_MAPPING, "editor-type", editorType);
}
else {
	editorType = portalPreferences.getValue(PortletKeys.DYNAMIC_DATA_MAPPING, "editor-type", "plain");
}

boolean useRichEditor = editorType.equals("rich");

String editorMode = "php";

if (langType.equals("css")) {
	editorMode = "css";
}
else if (langType.equals("xml") || langType.equals("xsl") || langType.equals("xsd")) {
	editorMode = "xml";
}
%>

<aui:input name="scriptContent" type="hidden" value="<%= script %>" />

<aui:select label="language-type" name="language">

	<%
	for (int i = 0; i < DDMTemplateConstants.LANG_TYPES.length; i++) {
	%>

		<aui:option label="<%= DDMTemplateConstants.LANG_TYPES[i].toUpperCase() %>" selected="<%= language.equals(DDMTemplateConstants.LANG_TYPES[i]) %>" value="<%= DDMTemplateConstants.LANG_TYPES[i] %>" />

	<%
	}
	%>

</aui:select>

<aui:field-wrapper label="script-file">
	<aui:input label="" name="script" type="file" />

	<aui:fieldset>
		<liferay-ui:panel-container extended="<%= false %>" id="templateScriptPanelContainer" persistState="<%= true %>">
			<liferay-ui:panel collapsible="<%= true %>" extended="<%= false %>" id="templateScriptSectionPanel" persistState="<%= true %>" title="script">
				<aui:select name="editorType">
					<aui:option label="rich" selected="<%= useRichEditor %>" value="rich" />
					<aui:option label="plain" value="plain" />
				</aui:select>
			

				<div class="lfr-plain-editor <%= useRichEditor ? "aui-helper-hidden" : StringPool.BLANK %>" id="<portlet:namespace />plainEditor">
					<aui:input cssClass="lfr-template-editor" inputCssClass="lfr-editor-textarea" label="" name="plainEditorField" onKeyDown="Liferay.Util.checkTab(this); Liferay.Util.disableEsc();" type="textarea" value="" wrap="off" />
				</div>

				<div class="lfr-rich-editor <%= !useRichEditor ? "aui-helper-hidden" : StringPool.BLANK %>" id="<portlet:namespace />richEditor"></div>
			</liferay-ui:panel>
		</liferay-ui:panel-container>
	</aui:fieldset>
</aui:field-wrapper>

<aui:script use="aui-ace-editor">
	var editorType = '<%= HtmlUtil.escapeJS(editorType) %>';

	var editorContentElement = A.one('#<portlet:namespace />scriptContent');

	var plainEditorField = A.one('#<portlet:namespace />plainEditorField');

	var richEditor;

	var prevEditorContent;

	function getEditorContent(type) {
		var content = '';

		if (type == 'plain') {
			content = plainEditorField.val();
		}
		else {
			content = richEditor.getSession().getValue();
		}

		return content;
	}

	function setEditorContent(type, content) {
		if (type == 'plain') {
			plainEditorField.val(content);
		}
		else {
			richEditor.getSession().setValue(content);
		}

		prevEditorContent = content;
	}

	function updateEditorType(event) {
		var oldEditorType = editorType;

		var newEditorType = A.one('#<portlet:namespace />editorType').val();

		var oldEditorContent = getEditorContent(oldEditorType);

		setEditorContent(newEditorType, oldEditorContent);

		var richEditorType = (newEditorType != 'plain');

		A.one('#<portlet:namespace />plainEditor').toggle(!richEditorType);
		A.one('#<portlet:namespace />richEditor').toggle(richEditorType);

		if (richEditorType) {
			richEditor.editor.resize();
		}

		var uri = '<portlet:renderURL><portlet:param name="struts_action" value="/dynamic_data_mapping/edit_template_xsl" /></portlet:renderURL>&editorType=' + newEditorType;

		A.io.request(uri);

		editorType = newEditorType;
	}

	A.on(
		'domready',
		function(event) {
			richEditor = new A.AceEditor(
				{
					boundingBox: '#<portlet:namespace />richEditor',
					width: '100%',
					height: '400',
					mode: '<%= editorMode %>'
				}
			).render();

			if (editorContentElement) {
				setEditorContent(editorType, editorContentElement.val());
			}

			A.one('#<portlet:namespace />editorType').on('change', updateEditorType);

			Liferay.on('<portlet:namespace />saveTemplate', function(event) {
				editorContentElement.val(getEditorContent());
			});
		},
		'#<portlet:namespace />richEditor'
	);
</aui:script>