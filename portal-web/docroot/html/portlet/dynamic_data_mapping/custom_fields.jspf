<%--
/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<aui:script use="aui-datepicker,liferay-portlet-dynamic-data-mapping">
	var FormBuilderTextField = A.FormBuilderTextField;
	var FormBuilderTypes = A.FormBuilder.types;

	var camelize = Liferay.Util.camelize;
	var trim = A.Lang.trim;

	var TPL_PARAGRAPH = '<p></p>';

	var TPL_SEPARATOR = '<div class="separator"></div>';

	var DDMTextField = A.Component.create(
		{
			EXTENDS: FormBuilderTextField,

			NAME: 'ddm-text-field',

			ATTRS: {
				fieldNamespace: {
					value: 'ddm'
				}
			}
		}
	);

	var DDMDateField = A.Component.create(
		{
			EXTENDS: DDMTextField,

			NAME: 'ddm-date',

			ATTRS: {
				dataType: {
					value: 'date'
				}
			},

			prototype: {
				getPropertyModel: function() {
					var instance = this;

					var model = DDMDateField.superclass.getPropertyModel.apply(instance, arguments);

					A.Array.each(model, function(item, index, collection) {
						if (item.attributeName === 'predefinedValue') {
							collection[index] = {
								attributeName: item.attributeName,
								editor: new A.DateCellEditor(),
								name: Liferay.Language.get('predefined-value')
							};
						}
					});

					return model;
				},

				renderUI: function() {
					var instance = this;

					DDMDateField.superclass.renderUI.apply(instance, arguments);

					instance.datePicker = new A.DatePicker(
						{
							trigger: instance.get('templateNode')
						}
					).render();
				}
			}
		}
	);

	var DDMDecimalField = A.Component.create(
		{
			EXTENDS: DDMTextField,

			NAME: 'ddm-decimal',

			ATTRS: {
				dataType: {
					value: 'double'
				}
			}

		}
	);

	var DDMIntegerField = A.Component.create(
		{
			EXTENDS: DDMTextField,

			NAME: 'ddm-integer',

			ATTRS: {
				dataType: {
					value: 'integer'
				}
			}
		}
	);

	var DDMNumberField = A.Component.create(
		{
			EXTENDS: DDMTextField,

			NAME: 'ddm-number',

			ATTRS: {
				dataType: {
					value: 'double'
				}
			}
		}
	);

	var DDMParagraphField = A.Component.create(
		{
			ATTRS: {
				dataType: {
					value: undefined
				},
				fieldNamespace: {
					value: 'ddm'
				},
				showLabel: {
					readOnly: true,
					value: false
				},
				style: {
					value: ''
				}
			},

			UI_ATTRS: ['label', 'style'],

			EXTENDS: A.FormBuilderField,

			NAME: 'ddm-paragraph',

			prototype: {
				getHTML: function() {
					return TPL_PARAGRAPH;
				},

				getPropertyModel: function() {
					var instance = this;

					return [
						{
							attributeName: 'type',
							editor: false,
							name: Liferay.Language.get('type')
						},
						{
							attributeName: 'label',
							editor: new A.TextAreaCellEditor(),
							name: Liferay.Language.get('text')
						},
						{
							attributeName: 'style',
							editor: new A.TextAreaCellEditor(),
							name: Liferay.Language.get('style')
						}
					];
				},

				_uiSetLabel: function(val) {
					var instance = this;

					instance.get('templateNode').setContent(val);
				},

				_uiSetStyle: function(val) {
					var instance = this;

					var styles = val.replace(/\n/g, '').split(';');
					var templateNode = instance.get('templateNode');

					templateNode.setStyle('');

					A.Array.each(
						styles,
						function(item, index, collection) {
							var rule = item.split(':');

							if (rule.length == 2) {
								var key = camelize(rule[0]);
								var value = trim(rule[1]);

								templateNode.setStyle(key, value);
							}
						}
					);
				}
			}
		}
	);

	var DDMSeparatorField = A.Component.create(
		{
			ATTRS: {
				dataType: {
					value: undefined
				},
				fieldNamespace: {
					value: 'ddm'
				},
				showLabel: {
					readOnly: true,
					value: false
				}
			},

			EXTENDS: A.FormBuilderField,

			NAME: 'ddm-separator',

			prototype: {
				getHTML: function() {
					return TPL_SEPARATOR;
				},

				getPropertyModel: function() {
					return [
						{
							attributeName: 'type',
							editor: false,
							name: Liferay.Language.get('type')
						}
					];
				}
			}
		}
	);

	FormBuilderTypes['ddm-date'] = DDMDateField;
	FormBuilderTypes['ddm-decimal'] = DDMDecimalField;
	FormBuilderTypes['ddm-integer'] = DDMIntegerField;
	FormBuilderTypes['ddm-number'] = DDMNumberField;
	FormBuilderTypes['ddm-paragraph'] = DDMParagraphField;
	FormBuilderTypes['ddm-separator'] = DDMSeparatorField;
</aui:script>