<%--
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<aui:script use="aui-datepicker,json,liferay-portlet-dynamic-data-lists,liferay-portlet-dynamic-data-mapping">
	var FormBuilderTextField = A.FormBuilderTextField;
	var FormBuilderTypes = A.FormBuilder.types;

	var camelize = Liferay.Util.camelize;
	var trim = A.Lang.trim;

	var EMPTY_STRING = '';

	var TPL_BUTTON = '<div class="aui-field-labels-inline">' +
						'<input type="button" value="<%= UnicodeLanguageUtil.get(pageContext, "select") %>" />' +
					'<div>';

	var TPL_PARAGRAPH = '<p></p>';

	var TPL_SEPARATOR = '<div class="separator"></div>';

	var FormBuilderFieldSupport = function() {
	};

	FormBuilderFieldSupport.ATTRS = {
		autoGeneratedName: {
			setter: A.DataType.Boolean.parse,
			value: true
		},

		indexType : {
			value: EMPTY_STRING
		},

		name: {
			setter: Liferay.FormBuilder.normalizeKey,
			valueFn: function() {
				var instance = this;

				return A.FormBuilderField.buildFieldName(instance.get('label'));
			}
		}
	};

	A.Base.mix(A.FormBuilderField, [FormBuilderFieldSupport]);

	A.FormBuilderField.prototype.getPropertyModel = (function (original) {
		return function () {
			var model = original.call(this);

			var options = {
				'': '<liferay-ui:message key="no" />',
				'keyword': '<liferay-ui:message key="yes" />'
			};

			model.push(
				{
					attributeName: 'indexType',
					editor: new A.RadioCellEditor({
						options: options
					}),
					formatter: function(o) {
						return options[o.data.value];
					},
					name: '<liferay-ui:message key="indexable" />'
				}
			);

			return model;
		};
	}(A.FormBuilderField.prototype.getPropertyModel));

	var DDMDateField = A.Component.create(
		{
			EXTENDS: A.FormBuilderTextField,

			NAME: 'ddm-date',

			ATTRS: {
				dataType: {
					value: 'date'
				},

				fieldNamespace: {
					value: 'ddm'
				}
			},

			prototype: {
				getPropertyModel: function() {
					var instance = this;

					var model = DDMDateField.superclass.getPropertyModel.apply(instance, arguments);

					A.Array.each(
						model,
						function(item, index, collection) {
							var attributeName = item.attributeName;

							if (attributeName === 'predefinedValue') {
								collection[index] = {
									attributeName: attributeName,
									editor: new A.DateCellEditor(),
									name: '<%= UnicodeLanguageUtil.get(pageContext, "predefined-value") %>'
								};
							}
						}
					);

					return model;
				},

				renderUI: function() {
					var instance = this;

					DDMDateField.superclass.renderUI.apply(instance, arguments);

					instance.datePicker = new A.DatePicker(
						{
							trigger: instance.get('templateNode'),
							calendar: {
								strings: {
									next: '<liferay-ui:message key="next" />',
									none: '<liferay-ui:message key="none" />',
									previous: '<liferay-ui:message key="previous" />',
									today: '<liferay-ui:message key="today" />'
								}
							}
						}
					).render();
				}
			}
		}
	);

	var DDMDecimalField = A.Component.create(
		{
			EXTENDS: A.FormBuilderTextField,

			NAME: 'ddm-decimal',

			ATTRS: {
				dataType: {
					value: 'double'
				},

				fieldNamespace: {
					value: 'ddm'
				}
			}

		}
	);

	var DDMDocumentLibraryField = A.Component.create(
		{
			EXTENDS: A.FormBuilderField,

			NAME: 'ddm-documentlibrary',

			ATTRS: {
				dataType: {
					value: 'document-library'
				},

				fieldNamespace: {
					value: 'ddm'
				},

				name: {
					valueFn: function() {
						return A.FormBuilderField.buildFieldName('documents-and-media');
					}
				}
			},

			prototype: {
				getHTML: function() {
					return TPL_BUTTON;
				},

				getPropertyModel: function() {
					var instance = this;

					var model = DDMDocumentLibraryField.superclass.getPropertyModel.apply(instance, arguments);

					A.Array.each(
						model,
						function(item, index, collection) {
							var attributeName = item.attributeName;
							var DLFileEntryCellEditor = Liferay.SpreadSheet.TYPE_EDITOR['ddm-documentlibrary'];

							if (attributeName === 'predefinedValue') {
								item.editor = new DLFileEntryCellEditor();

								item.formatter = function(obj) {
									var data = obj.data;

									var label = '';

									var value = data.value;

									if (value !== '') {
										label = '(<%= UnicodeLanguageUtil.get(pageContext, "file") %>)';
									}

									return label;
								};
							}
							else if (attributeName === 'type') {
								item.formatter = instance._defaultFormatter;
							}
						}
					);

					return model;
				},

				_defaultFormatter: function() {
					var instance = this;

					return 'documents-and-media';
				},

				_uiSetValue: function() {
					return '<%= UnicodeLanguageUtil.get(pageContext, "select") %>';
				}

			}

		}
	);

	var DDMFileUploadField = A.Component.create(
		{
			EXTENDS: A.FormBuilderFileUploadField,

			NAME: 'ddm-fileupload',

			ATTRS: {
				acceptFiles: {
					value: '<%= UnicodeFormatter.toString(StringUtil.merge(PrefsPropsUtil.getStringArray(PropsKeys.DL_FILE_EXTENSIONS, StringPool.COMMA))) %>'
				},

				dataType: {
					value: 'file-upload'
				},

				fieldNamespace: {
					value: 'ddm'
				},

				folder: {
					setter: function(val) {
						if (!A.Lang.isObject(val)) {
							val = A.JSON.parse(val);
						}

						return val
					},
					value: {
						folderId: <%= DLFolderConstants.DEFAULT_PARENT_FOLDER_ID %>,
						folderName: '<%= UnicodeLanguageUtil.get(pageContext, "home") %>'
					}
				},
				tip: {
					value: '<%= UnicodeLanguageUtil.format(locale, "upload-documents-no-larger-than-x-k", PrefsPropsUtil.getLong(PropsKeys.DL_FILE_MAX_SIZE) / 1024, false) %>'
				}
			},

			prototype: {
				getPropertyModel: function() {
					var instance = this;

					var model = DDMFileUploadField.superclass.getPropertyModel.apply(instance, arguments);

					A.Array.each(
						model,
						function(item, index, collection) {
							if (item.attributeName === 'predefinedValue') {
								item.editor = false;
							}
						}
					);

					model.push(
						{
							attributeName: 'acceptFiles',
							name: '<%= UnicodeLanguageUtil.get(pageContext, "allowed-file-extensions") %>'
						}
					);

					return model;
				}

			}

		}
	);

	var DDMIntegerField = A.Component.create(
		{
			EXTENDS: A.FormBuilderTextField,

			NAME: 'ddm-integer',

			ATTRS: {
				dataType: {
					value: 'integer'
				},

				fieldNamespace: {
					value: 'ddm'
				}
			}
		}
	);

	var DDMNumberField = A.Component.create(
		{
			EXTENDS: A.FormBuilderTextField,

			NAME: 'ddm-number',

			ATTRS: {
				dataType: {
					value: 'number'
				},

				fieldNamespace: {
					value: 'ddm'
				}
			}
		}
	);

	var DDMParagraphField = A.Component.create(
		{
			ATTRS: {
				dataType: {
					value: undefined
				},

				fieldNamespace: {
					value: 'ddm'
				},

				showLabel: {
					readOnly: true,
					value: true
				},

				style: {
					value: ''
				}
			},

			UI_ATTRS: ['label', 'style'],

			EXTENDS: A.FormBuilderField,

			NAME: 'ddm-paragraph',

			prototype: {
				getHTML: function() {
					return TPL_PARAGRAPH;
				},

				getPropertyModel: function() {
					var instance = this;

					return [
						{
							attributeName: 'type',
							editor: false,
							name: '<%= UnicodeLanguageUtil.get(pageContext, "type") %>'
						},
						{
							attributeName: 'label',
							editor: new A.TextAreaCellEditor(),
							name: '<%= UnicodeLanguageUtil.get(pageContext, "text") %>'
						},
						{
							attributeName: 'style',
							editor: new A.TextAreaCellEditor(),
							name: '<%= UnicodeLanguageUtil.get(pageContext, "style") %>'
						}
					];
				},

				_uiSetLabel: function(val) {
					var instance = this;

					instance.get('templateNode').setContent(val);
				},

				_uiSetStyle: function(val) {
					var instance = this;

					var styles = val.replace(/\n/g, '').split(';');
					var templateNode = instance.get('templateNode');

					templateNode.setStyle('');

					A.Array.each(
						styles,
						function(item, index, collection) {
							var rule = item.split(':');

							if (rule.length == 2) {
								var key = camelize(rule[0]);
								var value = trim(rule[1]);

								templateNode.setStyle(key, value);
							}
						}
					);
				}
			}
		}
	);

	var DDMSeparatorField = A.Component.create(
		{
			ATTRS: {
				dataType: {
					value: undefined
				},

				fieldNamespace: {
					value: 'ddm'
				},

				showLabel: {
					readOnly: true,
					value: false
				}
			},

			EXTENDS: A.FormBuilderField,

			NAME: 'ddm-separator',

			prototype: {
				getHTML: function() {
					return TPL_SEPARATOR;
				},

				getPropertyModel: function() {
					return [
						{
							attributeName: 'type',
							editor: false,
							name: '<%= UnicodeLanguageUtil.get(pageContext, "type") %>'
						}
					];
				}
			}
		}
	);

	var DDMTextField = A.Component.create(
		{
			EXTENDS: A.FormBuilderTextField,

			NAME: 'ddm-text',

			ATTRS: {
				fieldNamespace: {
					value: 'ddm'
				}
			},

			prototype: {
				getPropertyModel: function() {
					var instance = this;

					var model = DDMTextField.superclass.getPropertyModel.apply(instance, arguments);

					var options = {
						'': '<liferay-ui:message key="not-indexable" />',
						'keyword': '<liferay-ui:message key="indexable-keyword" />',
						'text': '<liferay-ui:message key="indexable-text" />'
					};

					A.Array.each(
						model,
						function(item, index, collection) {
							var attributeName = item.attributeName;

							if (attributeName === 'indexType') {
								item.editor.set('options', options);

								item.formatter = function(o) {
									return options[o.data.value];
								}
							}
						}
					);

					return model;
				}
			}
		}
	);

	var DDMTextAreaField = A.Component.create(
		{
			EXTENDS: A.FormBuilderTextAreaField,

			NAME: 'ddm-text-area',

			ATTRS: {
				fieldNamespace: {
					value: 'ddm'
				}
			},

			prototype: {
				getPropertyModel: function() {
					var instance = this;

					var model = DDMTextAreaField.superclass.getPropertyModel.apply(instance, arguments);

					var options = {
						'': '<liferay-ui:message key="not-indexable" />',
						'keyword': '<liferay-ui:message key="indexable-keyword" />',
						'text': '<liferay-ui:message key="indexable-text" />'
					};

					A.Array.each(
						model,
						function(item, index, collection) {
							var attributeName = item.attributeName;

							if (attributeName === 'indexType') {
								item.editor.set('options', options);

								item.formatter = function(o) {
									return options[o.data.value];
								}
							}
						}
					);

					return model;
				}
			}
		}
	);

	FormBuilderTypes['ddm-date'] = DDMDateField;
	FormBuilderTypes['ddm-decimal'] = DDMDecimalField;
	FormBuilderTypes['ddm-documentlibrary'] = DDMDocumentLibraryField;
	FormBuilderTypes['ddm-fileupload'] = DDMFileUploadField;
	FormBuilderTypes['ddm-integer'] = DDMIntegerField;
	FormBuilderTypes['ddm-number'] = DDMNumberField;
	FormBuilderTypes['ddm-paragraph'] = DDMParagraphField;
	FormBuilderTypes['ddm-separator'] = DDMSeparatorField;
	FormBuilderTypes['ddm-text'] = DDMTextField;
	FormBuilderTypes['ddm-textarea'] = DDMTextAreaField;
</aui:script>