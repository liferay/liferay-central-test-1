<%--
/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
Group controlPanelGroup = GroupLocalServiceUtil.getGroup(themeDisplay.getCompanyId(), GroupConstants.CONTROL_PANEL);

long controlPanelPlid = LayoutLocalServiceUtil.getDefaultPlid(controlPanelGroup.getGroupId(), true);
%>

<aui:script use="aui-io-request,io-upload-iframe,liferay-portlet-dynamic-data-lists,liferay-portlet-url">
	var SpreadSheet = Liferay.SpreadSheet;

	var DEFAULTS_FORM_VALIDATOR = AUI.defaults.FormValidator;

	DEFAULTS_FORM_VALIDATOR.RULES.requiredFields = function(value) {
		var spreadSheet = window.<portlet:namespace />spreadSheet;
		var activeColumn = spreadSheet.selection.getActiveColumn();
		var activeColumnKey = activeColumn.get('key');
		var activeRecord = spreadSheet.selection.getActiveRecord();

		var valid = true;

		A.Array.each(
			window.<portlet:namespace />structure,
			function(item, index, collection) {
				var fieldName = item.name;
				var fieldValue = activeRecord.getValue(fieldName);

				if (!fieldValue && (activeColumnKey !== fieldName) && (item.required === 'true')) {
					valid = false;
				}
			}
		);

		return valid;
	};

	DEFAULTS_FORM_VALIDATOR.STRINGS.requiredFields = Liferay.Language.get('please-fill-out-all-required-fields');

	var DLFileEntryCellEditor = A.Component.create(
		{
			NAME: 'document-library-file-entry-cell-editor',

			EXTENDS: A.BaseCellEditor,

			prototype: {
				ELEMENT_TEMPLATE: '<input type="hidden" />',

				initializer: function() {
					var instance = this;

					window['<%= PortalUtil.getPortletNamespace(PortletKeys.JOURNAL) %>selectDocumentLibrary'] = A.bind(instance._selectFileEntry, instance);
				},

				getElementsValue: function() {
					var instance = this;

					return instance.get('value');
				},

				_defInitToolbarFn: function() {
					var instance = this;

					DLFileEntryCellEditor.superclass._defInitToolbarFn.apply(instance, arguments);

					instance.toolbar.add(
						{
							handler: A.bind(instance._handleChooseEvent, instance),
							label: Liferay.Language.get('choose')
						},
						1
					);
				},

				_handleChooseEvent: function() {
					var instance = this;

					var portletURL = Liferay.PortletURL.createRenderURL();

					portletURL.setParameter('groupId', themeDisplay.getScopeGroupId());
					portletURL.setParameter('struts_action', '/journal/select_document_library');

					portletURL.setPlid(<%= controlPanelPlid %>);

					portletURL.setPortletId('<%= PortletKeys.JOURNAL %>');

					portletURL.setWindowState('pop_up');

					Liferay.Util.openWindow(
						{
							uri: portletURL.toString()
						}
					);
				},

				_selectFileEntry: function(url, uuid, version) {
					var instance = this

					instance.set(
						'value',
						A.JSON.stringify(
							{
								groupId: themeDisplay.getScopeGroupId(),
								uuid: uuid,
								version: version
							}
						)
					);
				},

				_uiSetValue: function(val) {
					var instance = this;

					var contentBox = instance.get('contentBox');

					var fileEntryLinkNode = SpreadSheet.Util.getFileEntryLinkNode(val, contentBox.one('a'));

					contentBox.prepend(fileEntryLinkNode);

					instance.elements.val(val);
				}
			}
		}
	);

	var FileUploadCellEditor = A.Component.create(
		{
			NAME: 'fileupload-cell-editor',

			EXTENDS: A.BaseCellEditor,

			ATTRS: {
				record: {
					value: null
				}
			},

			prototype: {
				ELEMENT_TEMPLATE: '<input type="file" />',

				getElementsValue: function() {
					var instance = this;

					return instance.get('value');
				},

				uploadFile: function() {
					var instance = this;

					var elementName = instance.get('elementName');
					var record = instance.get('record');

					var recordData = record.get('data');

					var portletURL = Liferay.PortletURL.createResourceURL();

					portletURL.setParameter('ddmStructureId', <%= ddmStructure.getStructureId() %>);
					portletURL.setParameter('fieldName', elementName);
					portletURL.setParameter('groupId', themeDisplay.getScopeGroupId());
					portletURL.setParameter('recordId', recordData.recordId);
					portletURL.setParameter('struts_action', '/dynamic_data_list_display/edit_record_file');

					portletURL.setPortletId('<%= PortletKeys.DYNAMIC_DATA_LIST_DISPLAY %>');

					portletURL.setWindowState('pop_up');

					var uri = portletURL.toString();

					var form = instance.get('contentBox');

					form.attr('action', uri);

					A.io.request(
						uri,
						{
							dataType: 'json',
							form: {
								id: form,
								upload: true
							},
							method: 'POST',
							on: {
								complete: function(ioEvent, id, xhr) {
									instance._onUploadComplete.call(instance, xhr);
								}
							}
						}
					);
				},

				_handleException: function(exception) {
					var instance = this;

					var errorMessage = '';

					if (exception.indexOf('com.liferay.portlet.documentlibrary.FileSizeException') > -1) {
						errorMessage = '<%= LanguageUtil.format(locale, "upload-documents-no-larger-than-x-k", PrefsPropsUtil.getLong(PropsKeys.DL_FILE_MAX_SIZE) / 1024, false) %>';
					}

					instance._showErrorMessage(errorMessage);
				},

				_handleSaveEvent: function(event) {
					var instance = this;

					var record = instance.get('record');

					var recordData = record.get('data');

					if (!recordData.recordId) {
						var serviceParameterTypes = [
							'long',
							'long',
							'int',
							'java.util.Map<java.lang.String, java.io.Serializable>',
							'com.liferay.portal.service.ServiceContext'
						];

						Liferay.Service.DDL.DDLRecord.addRecord(
							{
								groupId: themeDisplay.getScopeGroupId(),
								recordsetId: <%= recordSet.getRecordSetId() %>,
								displayIndex: 0,
								fieldsMap: JSON.stringify({}),
								serviceContext: JSON.stringify(
									{
										scopeGroupId: themeDisplay.getScopeGroupId(),
										userId: themeDisplay.getUserId(),
										workflowAction: Liferay.Workflow.ACTION_SAVE_DRAFT
									}
								),
								serviceParameterTypes: A.JSON.stringify(serviceParameterTypes)
							},
							function(response) {
								if (response.recordId > 0) {
									recordData.recordId = response.recordId;
								}

								instance.uploadFile();
							}
						);
					}
					else {
						instance.uploadFile();
					}
				},

				_onUploadComplete: function(xhr) {
					var instance = this;

					var responseText = xhr.responseText;

					if (responseText) {
						var data = A.JSON.parse(responseText);

						var exception = data.exception;

						if (!exception) {
							instance.set('value', responseText);

							FileUploadCellEditor.superclass._handleSaveEvent.apply(instance, arguments);
						}
						else {
							instance._handleException(exception);
						}
					}
				},

				_showErrorMessage: function(errorMessage) {
					var instance = this;

					var contentBox = instance.get('contentBox');

					var messageNode = A.Node.create('<div class="portlet-msg-error">' + errorMessage + '</div>');

					contentBox.prepend(messageNode);

					setTimeout(A.fn('remove', messageNode, null), 5000);
				},

				_syncElementsFocus: function() {
					var instance = this;

					instance.elements.val('');

					instance.validator.resetAllFields();
				},

				_uiSetValue: function(val) {
					var instance = this;

					var contentBox = instance.get('contentBox');

					var fileEntryLinkNode = SpreadSheet.Util.getFileEntryLinkNode(val, contentBox.one('a'));

					contentBox.prepend(fileEntryLinkNode);
				}
			}
		}
	);

	var PasswordCellEditor = A.Component.create(
		{
			NAME: 'password-cell-editor',

			EXTENDS: A.TextCellEditor,

			prototype: {
				ELEMENT_TEMPLATE: '<input autocomplete="off" type="password" />'
			}
		}
	);

	Liferay.SpreadSheet.TYPE_EDITOR['ddm-documentlibrary'] = DLFileEntryCellEditor;
	Liferay.SpreadSheet.TYPE_EDITOR['ddm-fileupload'] = FileUploadCellEditor;
	Liferay.SpreadSheet.TYPE_EDITOR['ddm-password'] = PasswordCellEditor;
</aui:script>