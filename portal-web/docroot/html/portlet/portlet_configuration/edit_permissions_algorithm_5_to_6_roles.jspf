<%
/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
%>

<%
RoleSearch searchContainer = new RoleSearch(renderRequest, renderPortletURL);

searchContainer.setId("rolesSearchContainer");

List<String> headerNames = new ArrayList<String>();

headerNames.add("role");

for (String actionName : actionsNames) {
	headerNames.add(actionName);
}

searchContainer.setHeaderNames(headerNames);

List<Role> allRoles = ResourceActionsUtil.getRoles(group, modelResource);

Role administrator = RoleLocalServiceUtil.getRole(company.getCompanyId(), RoleConstants.ADMINISTRATOR);

allRoles.remove(administrator);

if (group.isCommunity()) {
	Role communityAdministrator = RoleLocalServiceUtil.getRole(company.getCompanyId(), RoleConstants.COMMUNITY_ADMINISTRATOR);
	Role communityOwner = RoleLocalServiceUtil.getRole(company.getCompanyId(), RoleConstants.COMMUNITY_OWNER);

	allRoles.remove(communityAdministrator);
	allRoles.remove(communityOwner);
}
else if (group.isOrganization()) {
	Role organizationAdministrator = RoleLocalServiceUtil.getRole(company.getCompanyId(), RoleConstants.ORGANIZATION_ADMINISTRATOR);
	Role organizationOwner = RoleLocalServiceUtil.getRole(company.getCompanyId(), RoleConstants.ORGANIZATION_OWNER);

	allRoles.remove(organizationAdministrator);
	allRoles.remove(organizationOwner);
}

searchContainer.setTotal(allRoles.size());

List<Role> results = ListUtil.subList(allRoles, searchContainer.getStart(), searchContainer.getEnd());

searchContainer.setResults(results);

List resultRows = searchContainer.getResultRows();

for (int i = 0; i < results.size(); i++) {
	Role role = results.get(i);

	role = role.toEscapedModel();

	String name = role.getName();

	String definePermissionsHREF = null;

	if (!name.equals(RoleConstants.ADMINISTRATOR) && !name.equals(RoleConstants.COMMUNITY_ADMINISTRATOR) && !name.equals(RoleConstants.COMMUNITY_OWNER) && !name.equals(RoleConstants.ORGANIZATION_ADMINISTRATOR) && !name.equals(RoleConstants.ORGANIZATION_OWNER) && !name.equals(RoleConstants.OWNER) && RolePermissionUtil.contains(permissionChecker, role.getRoleId(), ActionKeys.DEFINE_PERMISSIONS)) {
		definePermissionsURL.setParameter("roleId", String.valueOf(role.getRoleId()));

		definePermissionsHREF = definePermissionsURL.toString();
	}

	ResultRow row = new ResultRow(role, role.getRoleId(), i);

	// Name

	row.addText(role.getTitle(locale), definePermissionsHREF);

	// Actions

	List<String> currentIndividualActions = null;
	List<String> currentGroupActions = null;
	List<String> currentGroupTemplateActions = null;
	List<String> currentCompanyActions = null;

	if (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 6) {
		currentIndividualActions = ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(resource.getCompanyId(), resource.getName(), resource.getScope(), resource.getPrimKey(), role.getRoleId(), actions);
		currentGroupActions = ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(resource.getCompanyId(), resource.getName(), ResourceConstants.SCOPE_GROUP, String.valueOf(groupId), role.getRoleId(), actions);
		currentGroupTemplateActions = ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(resource.getCompanyId(), resource.getName(), ResourceConstants.SCOPE_GROUP_TEMPLATE, "0", role.getRoleId(), actions);
		currentCompanyActions = ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(resource.getCompanyId(), resource.getName(), ResourceConstants.SCOPE_COMPANY, String.valueOf(resource.getCompanyId()), role.getRoleId(), actions);
	}
	else {
		List<Permission> permissions = PermissionLocalServiceUtil.getRolePermissions(role.getRoleId(), resource.getResourceId());

		currentIndividualActions = ResourceActionsUtil.getActions(permissions);

		try {
			Resource groupResource = ResourceLocalServiceUtil.getResource(resource.getCompanyId(), resource.getName(), ResourceConstants.SCOPE_GROUP, String.valueOf(groupId));

			permissions = PermissionLocalServiceUtil.getRolePermissions(role.getRoleId(), groupResource.getResourceId());

			currentGroupActions = ResourceActionsUtil.getActions(permissions);
		}
		catch (NoSuchResourceException nsre) {
			currentGroupActions = new ArrayList<String>();
		}

		try {
			Resource groupTemplateResource = ResourceLocalServiceUtil.getResource(resource.getCompanyId(), resource.getName(), ResourceConstants.SCOPE_GROUP_TEMPLATE, "0");

			permissions = PermissionLocalServiceUtil.getRolePermissions(role.getRoleId(), groupTemplateResource.getResourceId());

			currentGroupTemplateActions = ResourceActionsUtil.getActions(permissions);
		}
		catch (NoSuchResourceException nsre) {
			currentGroupTemplateActions = new ArrayList();
		}

		try {
			Resource companyResource = ResourceLocalServiceUtil.getResource(resource.getCompanyId(), resource.getName(), ResourceConstants.SCOPE_COMPANY, String.valueOf(resource.getCompanyId()));

			permissions = PermissionLocalServiceUtil.getRolePermissions(role.getRoleId(), companyResource.getResourceId());

			currentCompanyActions = ResourceActionsUtil.getActions(permissions);
		}
		catch (NoSuchResourceException nsre) {
			currentCompanyActions = new ArrayList();
		}
	}

	List<String> currentActions = new ArrayList<String>();

	currentActions.addAll(currentIndividualActions);
	currentActions.addAll(currentGroupActions);
	currentActions.addAll(currentGroupTemplateActions);
	currentActions.addAll(currentCompanyActions);

	List<String> guestUnsupportedActions = ResourceActionsUtil.getResourceGuestUnsupportedActions(portletResource, modelResource);

	for (String action : actions) {
		boolean checked = false;
		boolean disabled = false;
		String preselectedMsg = StringPool.BLANK;

		if (currentIndividualActions.contains(action)) {
			checked = true;
		}

		if (currentGroupActions.contains(action) || currentGroupTemplateActions.contains(action)) {
			checked = true;
			preselectedMsg = "x-is-allowed-to-do-action-x-in-all-items-of-type-x-in-x";
		}

		if (currentCompanyActions.contains(action)) {
			checked = true;
			preselectedMsg = "x-is-allowed-to-do-action-x-in-all-items-of-type-x-in-this-portal-instance";
		}

		if (name.equals(RoleConstants.GUEST) && guestUnsupportedActions.contains(action)) {
			disabled = true;
		}

		StringBundler sb = new StringBundler();

		sb.append("<input ");

		if (checked) {
			sb.append("checked ");
		}

		if (Validator.isNotNull(preselectedMsg)) {
			sb.append("class=\"lfr-checkbox-preselected\" ");
		}

		if (disabled) {
			sb.append("disabled ");
		}

		sb.append("name=\"");
		sb.append(role.getRoleId());

		if (Validator.isNotNull(preselectedMsg)) {
			sb.append("_PRESELECTED_");
		}
		else {
			sb.append("_ACTION_");
		}

		sb.append(action);
		sb.append("\" ");

		if (Validator.isNotNull(preselectedMsg)) {
			sb.append("onclick=\"return false;\" onmouseover=\"Liferay.Portal.ToolTip.show(this, '");
			sb.append(UnicodeLanguageUtil.format(pageContext, preselectedMsg, new Object[] {role.getTitle(locale), ResourceActionsUtil.getAction(pageContext, action), LanguageUtil.get(pageContext, ResourceActionsUtil.MODEL_RESOURCE_NAME_PREFIX + resource.getName()), group.getDescriptiveName()}));
			sb.append("'); return false;\" ");
		}

		sb.append("type=\"checkbox\" />");

		row.addText(sb.toString());
	}

	// CSS

	row.setClassName(EnterpriseAdminUtil.getCssClassName(role));
	row.setClassHoverName(EnterpriseAdminUtil.getCssClassName(role));

	// Add result row

	resultRows.add(row);
}
%>

<liferay-ui:search-iterator searchContainer="<%= searchContainer %>" />