<%
/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
%>

<%
List<Role> roles = ResourceActionsUtil.getRoles(group, modelResource);

Role administrator = RoleLocalServiceUtil.getRole(company.getCompanyId(), RoleConstants.ADMINISTRATOR);

roles.remove(administrator);

if (group.isCommunity()) {
	Role communityAdministrator = RoleLocalServiceUtil.getRole(company.getCompanyId(), RoleConstants.COMMUNITY_ADMINISTRATOR);
	Role communityOwner = RoleLocalServiceUtil.getRole(company.getCompanyId(), RoleConstants.COMMUNITY_OWNER);

	roles.remove(communityAdministrator);
	roles.remove(communityOwner);
}
else if (group.isOrganization()) {
	Role organizationAdministrator = RoleLocalServiceUtil.getRole(company.getCompanyId(), RoleConstants.ORGANIZATION_ADMINISTRATOR);
	Role organizationOwner = RoleLocalServiceUtil.getRole(company.getCompanyId(), RoleConstants.ORGANIZATION_OWNER);

	roles.remove(organizationAdministrator);
	roles.remove(organizationOwner);
}
%>

<liferay-ui:search-container id="rolesSearchContainer">
	<liferay-ui:search-container-results
		results="<%= roles %>"
		total="<%= roles.size() %>"
	/>

	<liferay-ui:search-container-row
		className="com.liferay.portal.model.Role"
		escapedModel="<%= true %>"
		keyProperty="roleId"
		modelVar="role"
	>
		<liferay-util:param name="className" value="<%= EnterpriseAdminUtil.getCssClassName(role) %>" />
		<liferay-util:param name="classHoverName" value="<%= EnterpriseAdminUtil.getCssClassName(role) %>" />

		<%
		String definePermissionsHREF = null;

		String name = role.getName();

		if (!name.equals(RoleConstants.ADMINISTRATOR) && !name.equals(RoleConstants.COMMUNITY_ADMINISTRATOR) && !name.equals(RoleConstants.COMMUNITY_OWNER) && !name.equals(RoleConstants.ORGANIZATION_ADMINISTRATOR) && !name.equals(RoleConstants.ORGANIZATION_OWNER) && !name.equals(RoleConstants.OWNER) && RolePermissionUtil.contains(permissionChecker, role.getRoleId(), ActionKeys.DEFINE_PERMISSIONS)) {
			definePermissionsURL.setParameter("roleId", String.valueOf(role.getRoleId()));

			definePermissionsHREF = definePermissionsURL.toString();
		}
		%>

		<liferay-ui:search-container-column-text
			href="<%= definePermissionsHREF %>"
			name="role"
			value="<%= role.getTitle(locale) %>"
		/>

		<%

		// Actions

		List<String> currentIndividualActions = null;
		List<String> currentGroupActions = null;
		List<String> currentGroupTemplateActions = null;
		List<String> currentCompanyActions = null;

		if (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 6) {
			currentIndividualActions = ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(resource.getCompanyId(), resource.getName(), resource.getScope(), resource.getPrimKey(), role.getRoleId(), actions);
			currentGroupActions = ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(resource.getCompanyId(), resource.getName(), ResourceConstants.SCOPE_GROUP, String.valueOf(groupId), role.getRoleId(), actions);
			currentGroupTemplateActions = ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(resource.getCompanyId(), resource.getName(), ResourceConstants.SCOPE_GROUP_TEMPLATE, "0", role.getRoleId(), actions);
			currentCompanyActions = ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(resource.getCompanyId(), resource.getName(), ResourceConstants.SCOPE_COMPANY, String.valueOf(resource.getCompanyId()), role.getRoleId(), actions);
		}
		else {
			List<Permission> permissions = PermissionLocalServiceUtil.getRolePermissions(role.getRoleId(), resource.getResourceId());

			currentIndividualActions = ResourceActionsUtil.getActions(permissions);

			try {
				Resource groupResource = ResourceLocalServiceUtil.getResource(resource.getCompanyId(), resource.getName(), ResourceConstants.SCOPE_GROUP, String.valueOf(groupId));

				permissions = PermissionLocalServiceUtil.getRolePermissions(role.getRoleId(), groupResource.getResourceId());

				currentGroupActions = ResourceActionsUtil.getActions(permissions);
			}
			catch (NoSuchResourceException nsre) {
				currentGroupActions = new ArrayList<String>();
			}

			try {
				Resource groupTemplateResource = ResourceLocalServiceUtil.getResource(resource.getCompanyId(), resource.getName(), ResourceConstants.SCOPE_GROUP_TEMPLATE, "0");

				permissions = PermissionLocalServiceUtil.getRolePermissions(role.getRoleId(), groupTemplateResource.getResourceId());

				currentGroupTemplateActions = ResourceActionsUtil.getActions(permissions);
			}
			catch (NoSuchResourceException nsre) {
				currentGroupTemplateActions = new ArrayList();
			}

			try {
				Resource companyResource = ResourceLocalServiceUtil.getResource(resource.getCompanyId(), resource.getName(), ResourceConstants.SCOPE_COMPANY, String.valueOf(resource.getCompanyId()));

				permissions = PermissionLocalServiceUtil.getRolePermissions(role.getRoleId(), companyResource.getResourceId());

				currentCompanyActions = ResourceActionsUtil.getActions(permissions);
			}
			catch (NoSuchResourceException nsre) {
				currentCompanyActions = new ArrayList();
			}
		}

		List<String> currentActions = new ArrayList<String>();

		currentActions.addAll(currentIndividualActions);
		currentActions.addAll(currentGroupActions);
		currentActions.addAll(currentGroupTemplateActions);
		currentActions.addAll(currentCompanyActions);

		List<String> guestUnsupportedActions = ResourceActionsUtil.getResourceGuestUnsupportedActions(portletResource, modelResource);

		for (String action : actions) {
			boolean checked = false;
			boolean disabled = false;
			String preselectedMsg = StringPool.BLANK;

			if (currentIndividualActions.contains(action)) {
				checked = true;
			}

			if (currentGroupActions.contains(action) || currentGroupTemplateActions.contains(action)) {
				checked = true;
				preselectedMsg = "x-is-allowed-to-do-action-x-in-all-items-of-type-x-in-x";
			}

			if (currentCompanyActions.contains(action)) {
				checked = true;
				preselectedMsg = "x-is-allowed-to-do-action-x-in-all-items-of-type-x-in-this-portal-instance";
			}

			if (name.equals(RoleConstants.GUEST) && guestUnsupportedActions.contains(action)) {
				disabled = true;
			}
		%>

			<liferay-ui:search-container-column-text
				buffer="buffer"
				name="<%= ResourceActionsUtil.getAction(pageContext, action) %>"
			>

				<%
				buffer.append("<input ");

				if (checked) {
					buffer.append("checked ");
				}

				if (Validator.isNotNull(preselectedMsg)) {
					buffer.append("class=\"lfr-checkbox-preselected\" ");
				}

				if (disabled) {
					buffer.append("disabled ");
				}

				buffer.append("name=\"");
				buffer.append(role.getRoleId());

				if (Validator.isNotNull(preselectedMsg)) {
					buffer.append("_PRESELECTED_");
				}
				else {
					buffer.append("_ACTION_");
				}

				buffer.append(action);
				buffer.append("\" ");

				if (Validator.isNotNull(preselectedMsg)) {
					buffer.append("onclick=\"return false;\" onmouseover=\"Liferay.Portal.ToolTip.show(this, '");
					buffer.append(UnicodeLanguageUtil.format(pageContext, preselectedMsg, new Object[] {role.getTitle(locale), ResourceActionsUtil.getAction(pageContext, action), LanguageUtil.get(pageContext, ResourceActionsUtil.MODEL_RESOURCE_NAME_PREFIX + resource.getName()), group.getDescriptiveName()}));
					buffer.append("'); return false;\" ");
				}

				buffer.append("type=\"checkbox\" />");
				%>

			</liferay-ui:search-container-column-text>
		<%
		}
		%>

	</liferay-ui:search-container-row>

	<liferay-ui:search-iterator searchContainer="<%= searchContainer %>" paginate="<%= false %>" />
</liferay-ui:search-container>