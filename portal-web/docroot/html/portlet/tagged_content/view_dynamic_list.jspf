<%
/**
 * Copyright (c) 2000-2008 Liferay, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
%>

<%
long[] entryIds = TagsEntryLocalServiceUtil.getEntryIds(scopeGroupId, entries);
long[] notEntryIds = TagsEntryLocalServiceUtil.getEntryIds(scopeGroupId, notEntries);

Date now = new Date();

if ((entryIds.length == 0) && (notEntryIds.length == 0)) {
	long[] tempArray = {-999999};

	entryIds = tempArray;
}

if (!groupByClass) {
	int total = TagsAssetLocalServiceUtil.getAssetsCount(scopeGroupId, classNameIds, entryIds, notEntryIds, andOperator, excludeZeroViewCount, now, now);

	searchContainer.setTotal(total);

	List results = TagsAssetLocalServiceUtil.getAssets(scopeGroupId, classNameIds, entryIds, notEntryIds, andOperator, orderByColumn1, orderByColumn2, orderByType1, orderByType2, excludeZeroViewCount, now, now, searchContainer.getStart(), searchContainer.getEnd());

	searchContainer.setResults(results);

	request.setAttribute("view.jsp-results", results);

	if (results.size() <= 0) {
		if (!themeDisplay.isSignedIn()) {
%>

		<style type="text/css">
			#p_p_id_<%=portletDisplay.getId() %>_ {
				display: none;
			}
		</style>

<%
		}
		else {
%>

		<liferay-ui:message key="there-are-no-results" />

		<style type="text/css">
			#p_p_id_<%=portletDisplay.getId() %>_ {
				opacity: 0.4;
			}

			.ie #p_p_id_<%=portletDisplay.getId() %>_ {
				filter: alpha(opacity=40);
				zoom: 1;
			}
		</style>

<%
		}
	}
%>
	<%@ include file="/html/portlet/tagged_content/view_dynamic_list_asset.jspf" %>
<%
}
else {

	int grandTotal = 0;

	String[] assetTypes = new String[4];
	assetTypes[0] = BlogsEntry.class.getName();
	assetTypes[1] = MBMessage.class.getName();
	assetTypes[2] = DLFileEntry.class.getName();
	assetTypes[3] = WikiPage.class.getName();

	String[] assetTitles = {"blogs", "threads", "documents", "wiki-pages"};

	for (int x = 0; x < assetTypes.length; x++) {
		long[] cIds = {PortalUtil.getClassNameId(assetTypes[x])};

		int total = TagsAssetLocalServiceUtil.getAssetsCount(scopeGroupId, cIds, entryIds, notEntryIds, andOperator, excludeZeroViewCount, now, now);

		grandTotal += total;

		searchContainer.setTotal(total);

		List results = TagsAssetLocalServiceUtil.getAssets(scopeGroupId, cIds, entryIds, notEntryIds, andOperator, orderByColumn1, orderByColumn2, orderByType1, orderByType2, excludeZeroViewCount, now, now, searchContainer.getStart(), searchContainer.getEnd());

		searchContainer.setResults(results);

		request.setAttribute("view.jsp-results", results);

		if (results.size() > 0) {

%>
<h3><liferay-ui:message key="<%= assetTitles[x] %>" /></h3>

<%@ include file="/html/portlet/tagged_content/view_dynamic_list_asset.jspf" %>
<%
		}
	}

	if (grandTotal == 0) {
%>
<style type="text/css">
	#p_p_id_<%=portletDisplay.getId() %>_ {
		display: none;
	}
</style>
<%
	}
}
%>