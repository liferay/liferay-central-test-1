<%
/**
 * Copyright (c) 2000-2009 Liferay, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
%>

<script type="text/javascript">
	function <portlet:namespace />handleEntry(entryId) {
		var entry = AUI().one('#<portlet:namespace/>' + entryId);

		if (entry) {
			var container = entry.get('parentNode');

			if (container) {
				if (container.hasClass('unread-entries')) {
					<portlet:namespace />markEntry(entry, entryId);
				}
				else {
					<portlet:namespace />toggleContent(entry);
				}
			}
		}
	}

	function <portlet:namespace />markEntry(entry, entryId) {
		Liferay.Service.Announcements.AnnouncementsFlag.addFlag({entryId : entryId, flag: <%= AnnouncementsFlagConstants.HIDDEN %>});

		var readContainer = AUI().all('#p_p_id<portlet:namespace /> .read-entries');
		var control = entry.all('.control-entry a');

		if (readContainer) {
			readContainer.append(entry);
		}

		if (control) {
			control.html('<liferay-ui:message key="show" />');
		}

		entry.show();
	}

	function <portlet:namespace />toggleContent(entry) {
		var content = entry.all('.entry-content');
		var control = entry.all('.control-entry a');

		if (entry.hasClass('visible')) {
			entry.removeClass('visible');

			if (content) {
				content.hide();
			}

			if (control) {
				control.html('<liferay-ui:message key="show" />');
			}
		}
		else {
			entry.addClass('visible');

			if (content) {
				content.show();
			}

			if (control) {
				control.html('<liferay-ui:message key="hide" />');
			}
		}
	}
</script>

<%
LinkedHashMap<Long, long[]> scopes = AnnouncementsUtil.getAnnouncementScopes(user.getUserId());

SearchContainer searchContainer = new SearchContainer(renderRequest, null, null, SearchContainer.DEFAULT_CUR_PARAM, delta, portletURL, null, "no-entries-were-found");

List<AnnouncementsEntry> results = null;
int total = 0;

int flagValue = AnnouncementsFlagConstants.NOT_HIDDEN;
%>

<div class="unread-entries">
	<%@ include file="/html/portlet/announcements/entry_iterator.jspf" %>
</div>

<%
boolean hasResults = total > 0;
%>

<liferay-ui:search-paginator searchContainer="<%= searchContainer %>" type="article" />

<%
flagValue = AnnouncementsFlagConstants.HIDDEN;
%>

<div class="read-entries">
	<%@ include file="/html/portlet/announcements/entry_iterator.jspf" %>
</div>

<%
hasResults = hasResults || (total > 0);
%>

<c:if test="<%= !hasResults && portletName.equals(PortletKeys.ALERTS) && !PortletPermissionUtil.contains(permissionChecker, plid, PortletKeys.ANNOUNCEMENTS, ActionKeys.ADD_ENTRY) %>">
	<script type="text/javascript">
		AUI().ready(
			function(A) {
				var portlet = A.one('#p_p_id<portlet:namespace />');

				if (portlet) {
					portlet.hide();
				}
			}
		);
	</script>
</c:if>

<liferay-ui:search-paginator searchContainer="<%= searchContainer %>" type="article" />