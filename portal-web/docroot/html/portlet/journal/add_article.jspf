<%--
/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
Map<String, PortletURL> addArticleURLs = getAddArticleURLs(renderRequest, renderResponse);
%>

<c:if test="<%= !addArticleURLs.isEmpty() %>">
	<div class="lfr-meta-actions edit-controls">
		<liferay-ui:icon-menu
			align="left"
			icon='<%= themeDisplay.getPathThemeImages() + "/common/add.png" %>'
			message='<%= LanguageUtil.format(pageContext, "add", new Object[] {(GroupLocalServiceUtil.getGroup(scopeGroupId)).getDescriptiveName()}) %>'
			showWhenSingleIcon="<%= true %>"
		>

			<%
			for (Map.Entry<String, PortletURL> entry : addArticleURLs.entrySet()) {
				String className = entry.getKey();
				String message = "basic-web-content";

				int pos = className.indexOf(_CLASSNAME_SEPARATOR);

				if (pos != -1) {
					message = className.substring(pos + _CLASSNAME_SEPARATOR.length(), className.length());
					className = className.substring(0, pos);
				}

				PortletURL addArticleURL = entry.getValue();

				addArticleURL.setParameter("groupId", String.valueOf(scopeGroupId));

				String addArticleURLString = addArticleURL.toString();

				AssetRendererFactory assetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(className);
			%>

				<liferay-ui:icon
					message='<%= message %>'
					src="<%= assetRendererFactory.getIconPath(renderRequest) %>"
					url='<%= addArticleURLString %>'
				/>

			<%
			}
			%>

		</liferay-ui:icon-menu>
	</div>
</c:if>

<%!
public PortletURL getAddArticleURL(RenderRequest renderRequest, RenderResponse renderResponse, String structureId) throws Exception {
	AssetRendererFactory assetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(JournalArticle.class.getName());

	PortletURL addArticleURL = null;

	if (assetRendererFactory != null) {
		addArticleURL = assetRendererFactory.getURLAdd((LiferayPortletRequest)renderRequest, (LiferayPortletResponse)renderResponse);

		if (addArticleURL != null) {
			addArticleURL.setWindowState(LiferayWindowState.MAXIMIZED);

			addArticleURL.setPortletMode(javax.portlet.PortletMode.VIEW);

			addArticleURL.setParameter("struts_action", "/journal/edit_article");

			String currentURL = PortalUtil.getCurrentURL(renderRequest);

			addArticleURL.setParameter("redirect", currentURL);
			addArticleURL.setParameter("backURL", currentURL);

			if (Validator.isNotNull(structureId)) {
				addArticleURL.setParameter("structureId", structureId);
			}
		}
	}

	return addArticleURL;
}

public Map<String, PortletURL> getAddArticleURLs(RenderRequest renderRequest, RenderResponse renderResponse) throws Exception {
	ThemeDisplay themeDisplay = (ThemeDisplay)renderRequest.getAttribute(WebKeys.THEME_DISPLAY);

	Map<String, PortletURL> addArticleURLs = new TreeMap<String, PortletURL>();

	List<JournalStructure> journalStructures = JournalStructureLocalServiceUtil.getStructures(themeDisplay.getScopeGroupId());

	PortletURL addArticleURL = getAddArticleURL(renderRequest, renderResponse, null);

	addArticleURLs.put(JournalArticle.class.getName(), addArticleURL);

	for (JournalStructure journalStructure : journalStructures) {
		addArticleURL = getAddArticleURL(renderRequest, renderResponse, journalStructure.getStructureId());

		if (addArticleURL != null) {
			addArticleURLs.put(JournalArticle.class.getName() + _CLASSNAME_SEPARATOR + journalStructure.getName(), addArticleURL);
		}
	}

	return addArticleURLs;
}

private static final String _CLASSNAME_SEPARATOR = "_CLASSNAME_";
%>