<%--
/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
UnicodeProperties settings = null;

String selectedClassNameIds = StringPool.BLANK;
String requiredClassNameIds = StringPool.BLANK;

boolean multiValued = true;

if (vocabulary != null) {
	settings = vocabulary.getSettingsProperties();
	selectedClassNameIds = settings.getProperty("selectedClassNameIds");
	requiredClassNameIds = settings.getProperty("requiredClassNameIds");
	multiValued = GetterUtil.getBoolean(settings.getProperty("multiValued"), true);
}
%>

<aui:input cssClass="vocabulary-checkbox" helpMessage="multi-valued-help" name="multiValued" type="checkbox" value="<%= multiValued %>" />

<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id="vocabularyExtraFieldsPanelContainer" persistState="<%= true %>" title="associated-asset-types">
	<aui:fieldset id="extraFields">

		<%
		long[] selectedClassNameIdsArray = StringUtil.split(selectedClassNameIds, StringPool.COMMA, 0L);

		List<String> indexes = new ArrayList<String>();

		if (selectedClassNameIdsArray.length == 0) {
			selectedClassNameIdsArray = new long[]{0};
		}

		if (String.valueOf(AssetConstants.CLASS_NAME_ID_ALL).equals(selectedClassNameIds)) {
		%>

			<div class="lfr-form-row lfr-form-row-inline">
				<div class="row-fields">
					<aui:select label="choose-asset-type" name="classNameId">
						<aui:option label="all-asset-types" selected="<%= true %>" value="<%= AssetConstants.CLASS_NAME_ID_ALL %>" />

						<%
						for (int i = 0; i < availableClassNameIds.length; i++) {
						%>

							<aui:option label='<%= "model.resource." + PortalUtil.getClassName(availableClassNameIds[i]) %>' selected="<%= false %>" value="<%= availableClassNameIds[i] %>" />

						<%
						}
						%>
					</aui:select>

					<aui:input cssClass="vocabulary-checkbox" name="required" type="checkbox" value="<%= requiredClassNameIds.equals(String.valueOf(AssetConstants.CLASS_NAME_ID_ALL)) %>" />
				</div>
			</div>

		<%
		}
		else {
			for (int index = 0; index < selectedClassNameIdsArray.length; index++) {

				indexes.add(String.valueOf(index));

				long[] requiredClassNameIdsArray = StringUtil.split(requiredClassNameIds, StringPool.COMMA, 0L);

				boolean required = false;

				if (ArrayUtil.contains(requiredClassNameIdsArray, selectedClassNameIdsArray[index])) {
					required = true;
				}
		%>

				<div class="lfr-form-row lfr-form-row-inline">
					<div class="row-fields">
						<aui:select label="choose-asset-type" name='<%= "classNameId" + index %>'>
							<aui:option label="all-asset-types" value="<%= AssetConstants.CLASS_NAME_ID_ALL %>" />

							<%
							for (int i = 0; i < availableClassNameIds.length; i++) {
								boolean selected = false;

								if (availableClassNameIds[i] == selectedClassNameIdsArray[index]) {
									selected = true;
								}
							%>

								<aui:option label='<%= "model.resource." + PortalUtil.getClassName(availableClassNameIds[i]) %>' selected="<%= selected %>" value="<%= availableClassNameIds[i] %>" />

							<%
							}
							%>
						</aui:select>

						<aui:input cssClass="vocabulary-checkbox" label="required" name='<%= "required" + index %>' type="checkbox" value="<%= required %>" />
					</div>
				</div>

		<%
			}
		}
		%>

		<aui:input name="indexes" type="hidden" value="<%= indexes.toString() %>" />
	</aui:fieldset>
</liferay-ui:panel>

<aui:script use="liferay-auto-fields">
	var autoFields = new Liferay.AutoFields(
		{
			contentBox: '#extraFields',
			fieldIndexes: '<portlet:namespace />indexes',
		}
	).render();
</aui:script>