<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<div class="export-dialog-tree panel-page-application">
	<aui:input cssClass="file-selector" label="export-the-selected-data-to-the-given-lar-file-name" name="exportFileName" size="50" value='<%= HtmlUtil.escape(StringUtil.replace(rootNodeName, " ", "_")) + "-" + Time.getShortTimestamp() + ".lar" %>' />

	<liferay-ui:panel-container extended="<%= true %>" id="export-dialog-tree-panel-container" persistState="<%= true %>">
		<aui:input name="layoutIds" type="hidden" />

		<c:if test="<%= !group.isLayoutPrototype() %>">
			<liferay-ui:panel collapsible="<%= false %>" cssClass="export-group-panel" defaultState="open" id="pagesPanel" persistState="<%= true %>" title="pages">
				<div class="selected-labels" id="<portlet:namespace />selectedPages">
					<liferay-ui:message key="all-pages"></liferay-ui:message>,
					<liferay-ui:message key="site-pages-settings"></liferay-ui:message>,
					<liferay-ui:message key="theme"></liferay-ui:message>,
					<liferay-ui:message key="theme-settings"></liferay-ui:message>,
					<liferay-ui:message key="logo"></liferay-ui:message>
				</div>

				<liferay-ui:icon
					cssClass="modify-link"
					image="add"
					label="<%= true %>"
					message="change"
					url='<%= "javascript:" + renderResponse.getNamespace() + "changePages();" %>'
				/>

				<div class="aui-helper-hidden" id="<portlet:namespace />changePages">
					<aui:fieldset cssClass="portlet-data-section" label="pages-to-export">
						<liferay-util:include page="/html/portlet/layouts_admin/tree_js.jsp">
							<liferay-util:param name="tabs1" value='<%= privateLayout ? "private-pages" : "public-pages" %>' />
							<liferay-util:param name="treeId" value="layoutsExportTree" />
							<liferay-util:param name="defaultStateChecked" value="1" />
							<liferay-util:param name="expandFirstNode" value="1" />
							<liferay-util:param name="saveState" value="0" />
							<liferay-util:param name="selectableTree" value="1" />
						</liferay-util:include>

						<aui:input label="site-pages-settings" name="<%= PortletDataHandlerKeys.LAYOUT_SET_SETTINGS %>" type="checkbox" value="<%= true %>" />
					</aui:fieldset>

					<aui:fieldset cssClass="portlet-data-section" label="look-and-feel">
						<aui:input helpMessage="export-import-theme-help" label="theme" name="<%= PortletDataHandlerKeys.THEME %>" type="checkbox" value="<%= true %>" />

						<aui:input helpMessage="export-import-theme-settings-help" label="theme-settings" name="<%= PortletDataHandlerKeys.THEME_REFERENCE %>" type="checkbox" value="<%= true %>" />

						<aui:input label="logo" name="<%= PortletDataHandlerKeys.LOGO %>" type="checkbox" value="<%= true %>" />
					</aui:fieldset>
				</div>
			</liferay-ui:panel>
		</c:if>

		<liferay-ui:panel collapsible="<%= false %>" cssClass="export-group-panel" defaultState="open" id="applicationPanel" persistState="<%= true %>" title="application-configuration">
			<ul class="lfr-tree lfr-component">
				<li class="tree-item">
					<aui:input checked="<%= true %>" helpMessage="all-applications-help" id="allApplications" label="all-applications" name="<%= PortletDataHandlerKeys.PORTLET_SETUP_ALL %>" type="radio" value="<%= true %>" />

					<ul class="aui-helper-hidden" id="<portlet:namespace />showChangeGlobalConfiguration">
						<li class="tree-item">
							<div class="selected-labels" id="<portlet:namespace />selectedGlobalConfiguration">
								<liferay-ui:message key="archived-setups"></liferay-ui:message>,
								<liferay-ui:message key="user-preferences"></liferay-ui:message>
							</div>

							<%
							String changeGlobalConfigurationURL = "javascript:" + renderResponse.getNamespace() + "changeGlobalConfiguration();";
							%>

							<liferay-ui:icon
								cssClass="modify-link"
								image="add"
								label="<%= true %>"
								message="change"
								url="<%= changeGlobalConfigurationURL %>"
							/>
						</li>
					</ul>

					<div class="aui-helper-hidden" id="<portlet:namespace />changeGlobalConfiguration">
						<aui:fieldset cssClass="portlet-data-section" label="all-applications">
							<aui:input label="archived-setups" name="<%= PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS %>" type="checkbox" value="<%= true %>" />

							<aui:input helpMessage="import-user-preferences-help" label="user-preferences" name="<%= PortletDataHandlerKeys.PORTLET_USER_PREFERENCES %>" type="checkbox" value="<%= true %>" />
						</aui:fieldset>
					</div>

					<aui:input helpMessage="choose-applications-help" id="chooseApplications" label="choose-applications" name="<%= PortletDataHandlerKeys.PORTLET_SETUP_ALL %>" type="radio" value="<%= false %>" />

					<c:if test="<%= !group.isLayoutPrototype() %>">
						<ul class="aui-helper-hidden" id="<portlet:namespace />selectApplications">

							<%
							Set<String> portletDataHandlerClasses = new HashSet<String>();

							for (Portlet portlet : portletsList) {
								String portletDataHandlerClass = portlet.getPortletDataHandlerClass();

								if (!portletDataHandlerClasses.contains(portletDataHandlerClass)) {
									portletDataHandlerClasses.add(portletDataHandlerClass);
								}
								else {
									continue;
								}

								PortletDataHandler portletDataHandler = portlet.getPortletDataHandlerInstance();
							%>

								 <li class="tree-item">
									<aui:input label="<%= PortalUtil.getPortletTitle(portlet, application, locale) %>" name="<%= PortletDataHandlerKeys.PORTLET_SETUP + StringPool.UNDERLINE + portlet.getPortletId() %>" type="checkbox" value="<%= portletDataHandler.isPublishToLiveByDefault() %>" />
								</li>

							<%
							}
							%>

						</ul>
				</c:if>
			</ul>
		</liferay-ui:panel>

		<liferay-ui:panel collapsible="<%= false %>" cssClass="export-group-panel" defaultState="open" id="contentPanel" persistState="<%= true %>" title="content">
			<ul class="lfr-tree lfr-component">
				<li class="tree-item">
					<aui:input checked="<%= true %>" helpMessage="all-content-help" id="allContent" label="all-content" name="<%= PortletDataHandlerKeys.PORTLET_DATA_ALL %>" type="radio" value="<%= true %>" />

					<ul class="aui-helper-hidden" id="<portlet:namespace />showChangeGlobalContent">
						<li>
							<div class="selected-labels" id="<portlet:namespace />selectedGlobalContent"></div>

							<%
							String changeGlobalContentURL = "javascript:" + renderResponse.getNamespace() + "changeGlobalContent();";
							%>

							<liferay-ui:icon
								cssClass="modify-link"
								image="add"
								label="<%= true %>"
								message="change"
								url="<%= changeGlobalContentURL %>"
							/>
						</li>
					</ul>

					<div class="aui-helper-hidden" id="<portlet:namespace />changeGlobalContent">
						<aui:fieldset cssClass="portlet-data-section" label="all-content">
							<aui:input helpMessage="export-import-categories-help" label="categories" name="<%= PortletDataHandlerKeys.CATEGORIES %>" type="checkbox" value="<%= false %>" />
						</aui:fieldset>
					</div>

					<aui:input helpMessage="choose-content-help" id="chooseContent" label="choose-content" name="<%= PortletDataHandlerKeys.PORTLET_DATA_ALL %>" type="radio" value="<%= false %>" />

					<ul class="aui-helper-hidden" id="<portlet:namespace />selectContents">
						<li>
							<liferay-ui:icon
								cssClass="modify-link"
								image="calendar"
								label="<%= true %>"
								message="filter-to-export-by-date"
							/>

							<%
							String changeRangeURL = "javascript:" + renderResponse.getNamespace() + "changeRange();";
							%>

							<ul>
								 <li>
									<div class="selected-labels" id="<portlet:namespace />selectedRange">
										<liferay-ui:message key="all"></liferay-ui:message>
									</div>

									<liferay-ui:icon
										cssClass="modify-link"
										image="add"
										label="<%= true %>"
										message="change"
										url="<%= changeRangeURL %>"
									/>
								 </li>
							</ul>

							<div class="aui-helper-hidden" id="<portlet:namespace />changeRange">
								<ul class="lfr-tree lfr-component">
									<li class="tree-item">
										<aui:fieldset cssClass="portlet-data-section" label="filter-to-export-by-date">
											<aui:input checked="<%= true %>" id="rangeAll" label="all" name="range" type="radio" value="all" />

											<aui:input id="rangeLastPublish" label="from-last-publish-date" name="range" type="radio" value="fromLastPublishDate" />

											<aui:input helpMessage="export-date-range-help" id="rangeDateRange" label="date-range" name="range" type="radio" value="dateRange" />

											<%
											Calendar today = CalendarFactoryUtil.getCalendar(timeZone, locale);

											Calendar yesterday = CalendarFactoryUtil.getCalendar(timeZone, locale);

											yesterday.add(Calendar.DATE, -1);
											%>

											<ul class="aui-helper-hidden" id="<portlet:namespace />startEndDate">
												<li>
													<aui:field-wrapper label="start-date">
														<liferay-ui:input-date
															dayParam="startDateDay"
															dayValue="<%= yesterday.get(Calendar.DATE) %>"
															disabled="<%= false %>"
															firstDayOfWeek="<%= yesterday.getFirstDayOfWeek() - 1 %>"
															monthParam="startDateMonth"
															monthValue="<%= yesterday.get(Calendar.MONTH) %>"
															yearParam="startDateYear"
															yearRangeEnd="<%= yesterday.get(Calendar.YEAR) %>"
															yearRangeStart="<%= yesterday.get(Calendar.YEAR) - 100 %>"
															yearValue="<%= yesterday.get(Calendar.YEAR) %>"
														/>

														&nbsp;

														<liferay-ui:input-time
															amPmParam='<%= "startDateAmPm" %>'
															amPmValue="<%= yesterday.get(Calendar.AM_PM) %>"
															disabled="<%= false %>"
															hourParam='<%= "startDateHour" %>'
															hourValue="<%= yesterday.get(Calendar.HOUR) %>"
															minuteInterval="<%= 1 %>"
															minuteParam='<%= "startDateMinute" %>'
															minuteValue="<%= yesterday.get(Calendar.MINUTE) %>"
														/>
													</aui:field-wrapper>
												</li>

												<li>
													<aui:field-wrapper label="end-date">
														<liferay-ui:input-date
															dayParam="endDateDay"
															dayValue="<%= today.get(Calendar.DATE) %>"
															disabled="<%= false %>"
															firstDayOfWeek="<%= today.getFirstDayOfWeek() - 1 %>"
															monthParam="endDateMonth"
															monthValue="<%= today.get(Calendar.MONTH) %>"
															yearParam="endDateYear"
															yearRangeEnd="<%= today.get(Calendar.YEAR) %>"
															yearRangeStart="<%= today.get(Calendar.YEAR) - 100 %>"
															yearValue="<%= today.get(Calendar.YEAR) %>"
														/>

														&nbsp;

														<liferay-ui:input-time
															amPmParam='<%= "endDateAmPm" %>'
															amPmValue="<%= today.get(Calendar.AM_PM) %>"
															disabled="<%= false %>"
															hourParam='<%= "endDateHour" %>'
															hourValue="<%= today.get(Calendar.HOUR) %>"
															minuteInterval="<%= 1 %>"
															minuteParam='<%= "endDateMinute" %>'
															minuteValue="<%= today.get(Calendar.MINUTE) %>"
														/>
													</aui:field-wrapper>
												</li>
											</ul>

											<aui:input id="rangeLast" inlineField="<%= true %>" label="last" name="range" type="radio" value="last" />

											<aui:select inlineField="<%= true %>" label="" name="last">
												<aui:option label='<%= LanguageUtil.format(pageContext, "x-hours", "12") %>' value="12" />
												<aui:option label='<%= LanguageUtil.format(pageContext, "x-hours", "24") %>' value="24" />
												<aui:option label='<%= LanguageUtil.format(pageContext, "x-hours", "48") %>' value="48" />
												<aui:option label='<%= LanguageUtil.format(pageContext, "x-days", "7") %>' value="168" />
											</aui:select>
										</aui:fieldset>
									</li>
								</ul>
							</div>
						</li>

						<%
						Set<String> displayedControls = new HashSet<String>();
						Set<String> portletDataHandlerClasses = new HashSet<String>();

						for (Portlet portlet : portletsList) {
							String portletDataHandlerClass = portlet.getPortletDataHandlerClass();

							if (!portletDataHandlerClasses.contains(portletDataHandlerClass)) {
								portletDataHandlerClasses.add(portletDataHandlerClass);
							}
							else {
								continue;
							}

							String portletTitle = PortalUtil.getPortletTitle(portlet, application, locale);

							PortletDataHandler portletDataHandler = portlet.getPortletDataHandlerInstance();

							String changeContentURL = "javascript:" + renderResponse.getNamespace() + "changeContent('" + portlet.getPortletId() + "');";
						%>

							<li>
								<aui:input checked="<%= portletDataHandler.isPublishToLiveByDefault() %>" label="<%= portletTitle %>" name="<%= PortletDataHandlerKeys.PORTLET_DATA + StringPool.UNDERLINE + portlet.getPortletId() %>" type="checkbox" />

								<%
								PortletDataHandlerControl[] exportControls = portletDataHandler.getExportControls();
								PortletDataHandlerControl[] metadataControls = portletDataHandler.getExportMetadataControls();

								if (Validator.isNotNull(exportControls) || Validator.isNotNull(metadataControls)) {
								%>

									<ul class="aui-helper-hidden" id="<portlet:namespace />showChangeContent_<%= portlet.getPortletId() %>">
										<li>
											<div class="selected-labels" id="<portlet:namespace />selectedContent_<%= portlet.getPortletId() %>"></div>

											<liferay-ui:icon
												cssClass="modify-link"
												image="add"
												label="<%= true %>"
												message="change"
												url="<%= changeContentURL %>"
											/>
										</li>
									</ul>

									<aui:script>
										Liferay.Util.toggleBoxes('<portlet:namespace /><%= PortletDataHandlerKeys.PORTLET_DATA + StringPool.UNDERLINE + portlet.getPortletId() %>Checkbox', '<portlet:namespace />showChangeContent<%= StringPool.UNDERLINE + portlet.getPortletId() %>');
									</aui:script>

									<div class="aui-helper-hidden" id="<portlet:namespace />changeContent_<%= portlet.getPortletId() %>">
										<ul class="lfr-tree lfr-component">
											<li class="tree-item">
												<aui:fieldset cssClass="portlet-type-data-section" label="<%= portletTitle %>">

													<%
													String selectedContent = StringPool.BLANK;

													if (exportControls != null) {
														request.setAttribute("render_controls.jsp-controls", exportControls);
														request.setAttribute("render_controls.jsp-portletDisabled", !portletDataHandler.isPublishToLiveByDefault());

														selectedContent += ArrayUtil.toString(exportControls, "controlName", StringPool.COMMA_AND_SPACE, locale);
													%>

														<aui:field-wrapper label="content">
															<ul>
																<liferay-util:include page="/html/portlet/layouts_admin/render_controls.jsp" />
															</ul>
														</aui:field-wrapper>

													<%
													}

													if (metadataControls != null) {
														for (PortletDataHandlerControl metadataControl : metadataControls) {
															if (!displayedControls.contains(metadataControl.getControlName())) {
																displayedControls.add(metadataControl.getControlName());
															}
															else {
																continue;
															}

															PortletDataHandlerBoolean control = (PortletDataHandlerBoolean)metadataControl;

															PortletDataHandlerControl[] childrenControls = control.getChildren();

															if ((childrenControls != null) && (childrenControls.length > 0)) {
																request.setAttribute("render_controls.jsp-controls", childrenControls);
																request.setAttribute("render_controls.portletId", portlet.getPortletId());

																selectedContent += (selectedContent.equals(StringPool.BLANK) ? "" : ",") + ArrayUtil.toString(childrenControls, "controlName", StringPool.COMMA_AND_SPACE, locale);
															%>

															<aui:field-wrapper label="content-metadata">
																<ul>
																	<liferay-util:include page="/html/portlet/layouts_admin/render_controls.jsp" />
																</ul>
															</aui:field-wrapper>

															<%
															}
														}
													}
													%>

													<aui:script use="aui-base">
														<portlet:namespace />refreshSelectedLabel('selectedContent_<%= portlet.getPortletId() %>', '<%= selectedContent %>');
													</aui:script>
												</aui:fieldset>
											</li>
										</ul>
									</div>

								<%
								}
								%>

							</li>

						<%
						}
						%>

					</ul>
				</li>
			</ul>
		</liferay-ui:panel>

		<liferay-ui:panel collapsible="<%= false %>" cssClass="export-group-panel" defaultState="open" id="permissionsPanel" persistState="<%= true %>" title="permissions">
			<ul class="lfr-tree lfr-component">
				<li class="tree-item">
					<aui:input label="permissions" name="<%= PortletDataHandlerKeys.PERMISSIONS %>" type="checkbox" />

					<ul id="<portlet:namespace />selectPermissions">
						<li>
							<aui:input label="permissions-assigned-to-roles" name="permissionsAssignedToRoles" type="checkbox" value="<%= true %>" />
						</li>
					</ul>

					<aui:script>
						Liferay.Util.toggleBoxes('<portlet:namespace /><%= PortletDataHandlerKeys.PERMISSIONS %>Checkbox', '<portlet:namespace />selectPermissions');
					</aui:script>
				</li>
			</ul>
		</liferay-ui:panel>
	</liferay-ui:panel-container>
</div>

<aui:script>
	Liferay.provide(
		window,
		'<portlet:namespace />changeContent',
		function(portletId) {
			var A = AUI();

			var changeContentNode = A.one('#<portlet:namespace />changeContent_' + portletId);

			var changeContentDialog = changeContentNode.getData('changeContentDialog');

			if (!changeContentDialog) {
				changeContentNode.show();

				var contentBox;

				changeContentDialog = new A.Dialog(
					{
						align: Liferay.Util.Window.ALIGN_CENTER,
						bodyContent: changeContentNode,
						centered: true,
						modal: true,
						title: '<%= UnicodeLanguageUtil.get(pageContext, "content-to-export") %>',
						width: 400,
						buttons: [
							{
								label: '<%= UnicodeLanguageUtil.get(pageContext, "ok") %>',
								handler: function() {
									var inputs = contentBox.all('.aui-field-input-choice');
									var selectedContent = [];

									A.each(
										inputs,
										function(item, index, collection) {
											var checked = item.attr('checked');

											if (checked == true) {
												var itemName = item.attr('id');

												itemName = itemName.substring(0, itemName.length - 8);
												itemName = itemName.substring(itemName.lastIndexOf('_') + 1, itemName.length);

												selectedContent.push(Liferay.Language.get(itemName));
											}
										}
									);

									<portlet:namespace />refreshSelectedLabel('selectedContent_' + portletId, selectedContent.join(', '));

									this.hide();
								}
							},
							{
								label: '<%= UnicodeLanguageUtil.get(pageContext, "cancel") %>',
								handler: function() {
									this.hide();
								}
							}
						]
					}
				);

				changeContentDialog.render();

				contentBox = changeContentDialog.get('contentBox');

				changeContentNode.setData('changeContentDialog', changeContentDialog);
			}
			else {
				changeContentDialog.show();
			}
		},
		['aui-dialog']
	);

	Liferay.provide(
		window,
		'<portlet:namespace />changeGlobalContent',
		function() {
			var A = AUI();

			var changeGlobalContentNode = A.one('#<portlet:namespace />changeGlobalContent');

			var changeGlobalContentDialog = changeGlobalContentNode.getData('changeGlobalContentDialog');

			if (!changeGlobalContentDialog) {
				changeGlobalContentNode.show();

				var contentBox;

				changeGlobalContentDialog = new A.Dialog(
					{
						align: Liferay.Util.Window.ALIGN_CENTER,
						bodyContent: changeGlobalContentNode,
						centered: true,
						modal: true,
						title: '<%= UnicodeLanguageUtil.get(pageContext, "content-to-export") %>',
						width: 400,
						buttons: [
							{
								label: '<%= UnicodeLanguageUtil.get(pageContext, "ok") %>',
								handler: function() {
									selectedGlobalContent = '';

									if (contentBox.one('#<portlet:namespace /><%= PortletDataHandlerKeys.CATEGORIES %>Checkbox').attr('checked') == true) {
										selectedGlobalContent = Liferay.Language.get('categories');
									}

									<portlet:namespace />refreshSelectedLabel('selectedGlobalContent', selectedGlobalContent);

									this.hide();
								}
							},
							{
								label: '<%= UnicodeLanguageUtil.get(pageContext, "cancel") %>',
								handler: function() {
									this.hide();
								}
							}
						]
					}
				);

				changeGlobalContentDialog.render();

				contentBox = changeGlobalContentDialog.get('contentBox');

				changeGlobalContentNode.setData('changeGlobalContentDialog', changeGlobalContentDialog);
			}
			else {
				changeGlobalContentDialog.show();
			}
		},
		['aui-dialog']
	);

	Liferay.provide(
		window,
		'<portlet:namespace />changeGlobalConfiguration',
		function() {
			var A = AUI();

			var changeGlobalConfigurationNode = A.one('#<portlet:namespace />changeGlobalConfiguration');

			var changeGlobalConfigurationDialog = changeGlobalConfigurationNode.getData('changeGlobalConfigurationDialog');

			if (!changeGlobalConfigurationDialog) {
				changeGlobalConfigurationNode.show();

				var contentBox;

				changeGlobalConfigurationDialog = new A.Dialog(
					{
						align: Liferay.Util.Window.ALIGN_CENTER,
						bodyContent: changeGlobalConfigurationNode,
						centered: true,
						modal: true,
						title: '<%= UnicodeLanguageUtil.get(pageContext, "application-configuration") %>',
						width: 400,
						buttons: [
							{
								label: '<%= UnicodeLanguageUtil.get(pageContext, "ok") %>',
								handler: function() {
									var selectedGlobalConfiguration = [];

									if (contentBox.one('#<portlet:namespace /><%= PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS %>Checkbox').attr('checked') == true) {
										selectedGlobalConfiguration.push(Liferay.Language.get('archived-setups'));
									}

									if (contentBox.one('#<portlet:namespace /><%= PortletDataHandlerKeys.PORTLET_USER_PREFERENCES %>Checkbox').attr('checked') == true) {
										selectedGlobalConfiguration.push(Liferay.Language.get('user-preferences'));
									}

									<portlet:namespace />refreshSelectedLabel('selectedGlobalConfiguration', selectedGlobalConfiguration.join(', '));

									this.hide();
								}
							},
							{
								label: '<%= UnicodeLanguageUtil.get(pageContext, "cancel") %>',
								handler: function() {
									this.hide();
								}
							}
						]
					}
				);

				changeGlobalConfigurationDialog.render();

				contentBox = changeGlobalConfigurationDialog.get('contentBox');

				changeGlobalConfigurationNode.setData('changeGlobalConfigurationDialog', changeGlobalConfigurationDialog);
			}
			else {
				changeGlobalConfigurationDialog.show();
			}
		},
		['aui-dialog']
	);

	Liferay.provide(
		window,
		'<portlet:namespace />changePages',
		function() {
			var A = AUI();

			var changePagesNode = A.one('#<portlet:namespace />changePages');

			var changePagesDialog = changePagesNode.getData('changePagesDialog');

			if (!changePagesDialog) {
				changePagesNode.show();

				var contentBox;

				changePagesDialog = new A.Dialog(
					{
						align: Liferay.Util.Window.ALIGN_CENTER,
						bodyContent: changePagesNode,
						modal: true,
						title: '<%= UnicodeLanguageUtil.get(pageContext, "pages") %>',
						width: 400,
						buttons: [
							{
								label: '<%= UnicodeLanguageUtil.get(pageContext, "ok") %>',
								handler: function() {
									var selectedPages = [];

									var layoutsExportTreeOutput = contentBox.one('#<portlet:namespace />layoutsExportTreeOutput');

									if (layoutsExportTreeOutput) {
										var layoutIdsInput = A.one('#<portlet:namespace />layoutIds');

										var treeView = layoutsExportTreeOutput.getData('treeInstance');
										var rootNode = treeView.item(0);

										if (rootNode.isChecked()) {
											layoutIdsInput.val('');

									       	selectedPages.push(Liferay.Language.get('all-pages'));
										}
										else {
											var layoutIds = [];

											var regexLayoutId = /layoutId_(\d+)/;

											treeView.eachChildren(
												function(item, index, collection) {
													if (item.isChecked()) {
														var match = regexLayoutId.exec(item.get('id'));

														if (match) {
															layoutIds.push(
																{
																	includeChildren: !item.hasChildNodes(),
																	layoutId: match[1]
																}
															);
														}
													}
												},
												true
											);

											if (layoutIdsInput) {
												layoutIdsInput.val(A.JSON.stringify(layoutIds));
											}

											selectedPages.push(Liferay.Language.get('selected-pages'));
										}

										if (A.one('#<portlet:namespace /><%= PortletDataHandlerKeys.LAYOUT_SET_SETTINGS %>Checkbox').attr('checked') == true) {
											selectedPages.push(Liferay.Language.get('site-pages-settings'));
										}

										if (A.one('#<portlet:namespace /><%= PortletDataHandlerKeys.THEME %>Checkbox').attr('checked') == true) {
											selectedPages.push(Liferay.Language.get('theme'));
										}

										if (A.one('#<portlet:namespace /><%= PortletDataHandlerKeys.THEME_REFERENCE %>Checkbox').attr('checked') == true) {
											selectedPages.push(Liferay.Language.get('theme-settings'));
										}

										if (A.one('#<portlet:namespace /><%= PortletDataHandlerKeys.LOGO %>Checkbox').attr('checked') == true) {
											selectedPages.push(Liferay.Language.get('logo'));
										}

										<portlet:namespace />refreshSelectedLabel('selectedPages', selectedPages.join(', '));
									}

									this.hide();
								}
							},
							{
								label: '<%= UnicodeLanguageUtil.get(pageContext, "cancel") %>',
								handler: function() {
									this.hide();
								}
							}
						]
					}
				);

				changePagesDialog.render();

				contentBox = changePagesDialog.get('contentBox');

				changePagesNode.setData('changePagesDialog', changePagesDialog);
			}
			else {
				changePagesDialog.show();
			}
		},
		['aui-dialog']
	);

	Liferay.provide(
		window,
		'<portlet:namespace />changeRange',
		function() {
			var A = AUI();

			var changeRangeNode = A.one('#<portlet:namespace />changeRange');

			var changeRangeDialog = changeRangeNode.getData('changeRangeDialog');

			if (!changeRangeDialog) {
				changeRangeNode.show();

				var contentBox;

				changeRangeDialog = new A.Dialog(
					{
						align: Liferay.Util.Window.ALIGN_CENTER,
						bodyContent: changeRangeNode,
						centered: true,
						modal: true,
						title: '<%= UnicodeLanguageUtil.get(pageContext, "content-to-export") %>',
						width: 400,
						buttons: [
							{
								label: '<%= UnicodeLanguageUtil.get(pageContext, "ok") %>',
								handler: function() {
									var selectedRange = '';

									if (contentBox.one('#<portlet:namespace />rangeAll').attr('checked') == true) {
										selectedRange = Liferay.Language.get('all');
									}
									else if (contentBox.one('#<portlet:namespace />rangeLastPublish').attr('checked') == true) {
										selectedRange = Liferay.Language.get('from-last-publish-date');
									}
									else if (contentBox.one('#<portlet:namespace />rangeDateRange').attr('checked') == true) {
										selectedRange = Liferay.Language.get('date-range');
									}
									else if (contentBox.one('#<portlet:namespace />rangeLast').attr('checked') == true) {
										selectedRange = Liferay.Language.get('last');
									}

									<portlet:namespace />refreshSelectedLabel('selectedRange', selectedRange);

									this.hide();
								}
							},
							{
								label: '<%= UnicodeLanguageUtil.get(pageContext, "cancel") %>',
								handler: function() {
									this.hide();
								}
							}
						]
					}
				);

				changeRangeDialog.render();

				contentBox = changeRangeDialog.get('contentBox');

				changeRangeNode.setData('changeRangeDialog', changeRangeDialog);
			}
			else {
				changeRangeDialog.show();
			}
		},
		['aui-dialog']
	);

	Liferay.provide(
		window,
		'<portlet:namespace />handleFilterAllToggle',
		function(event) {
			var checked = event.currentTarget.attr('checked');
			var inputId = event.currentTarget.attr('id');
		}
	);

	Liferay.provide(
		window,
		'<portlet:namespace />refreshSelectedLabel',
		function(labelDivId, label) {
			var A = AUI();

			var labelDiv = A.one('#<portlet:namespace />' + labelDivId);

			if (labelDiv != null) {
				labelDiv.html(label);
			}
		}
	);

	Liferay.Util.toggleRadio('<portlet:namespace />chooseApplications', '<portlet:namespace />selectApplications', ['<portlet:namespace />showChangeGlobalConfiguration']);
	Liferay.Util.toggleRadio('<portlet:namespace />allApplications', '<portlet:namespace />showChangeGlobalConfiguration', ['<portlet:namespace />selectApplications']);

	Liferay.Util.toggleRadio('<portlet:namespace />rangeDateRange', '<portlet:namespace />startEndDate');
	Liferay.Util.toggleRadio('<portlet:namespace />rangeAll', '', ['<portlet:namespace />startEndDate']);
	Liferay.Util.toggleRadio('<portlet:namespace />rangeLastPublish', '', ['<portlet:namespace />startEndDate']);
	Liferay.Util.toggleRadio('<portlet:namespace />rangeLast', '', ['<portlet:namespace />startEndDate']);

	Liferay.Util.toggleRadio('<portlet:namespace />chooseContent', '<portlet:namespace />selectContents', ['<portlet:namespace />showChangeGlobalContent']);
	Liferay.Util.toggleRadio('<portlet:namespace />allContent', '<portlet:namespace />showChangeGlobalContent', ['<portlet:namespace />selectContents']);
</aui:script>