<%@ page import="com.liferay.portal.model.Organization" %>
<%@ page import="java.util.Iterator" %>
<%
/**
 * Copyright (c) 2000-2007 Liferay, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
%>

<%
String[] parentOrganizationIdsParamValues = request.getParameterValues("parentOrganizationIds");

long[] parentOrganizationIds = null;

if ((parentOrganizationIdsParamValues == null) || (parentOrganizationIdsParamValues.length == 0)) {
	parentOrganizationIds = new long[0];
}
else {
	parentOrganizationIds = StringUtil.split(parentOrganizationIdsParamValues[parentOrganizationIdsParamValues.length -1], 0L);
}

List organizations = OrganizationLocalServiceUtil.getOrganizations(parentOrganizationIds);

if (parentOrganizationIds.length == 0) {
	searchContainer.setEmptyResultsMessage("the-user-must-have-at-least-one-regular-organization-to-be-able-to-select-an-associated-location");
}
else if (organizations.size() == 0) {
	searchContainer.setEmptyResultsMessage("none-of-the-regular-organizations-of-the-user-have-valid-associated-locations");
}
else {
	//out.println(LanguageUtil.format("showing-locations-valid-for-x", ListUtil.toString(organizations, "name", ", "));
	searchFilter = "Filter by locations valid for: " + ListUtil.toString(organizations, "name", ", ");
}

total = 0;
results = new UniqueList();

for (Iterator iterator = organizations.iterator(); iterator.hasNext();) {
	Organization organization = (Organization) iterator.next();

	if (organization.isLocation()) {
		continue;
	}

	results.addAll(searchBottomUpRecursiveOrganizations(company.getCompanyId(), organization, searchTerms, searchContainer));

}

total = results.size();
results = results.subList(searchContainer.getStart(), Math.min(results.size(), searchContainer.getEnd()));
%>

<%!
public List searchBottomUpRecursiveOrganizations(
	long companyId, Organization organization, OrganizationSearchTerms searchTerms, SearchContainer searchContainer)
	throws PortalException, SystemException {

	// Bottom up recursive calculation of parent organizations and
	// associated locations

	List organizations = null;

	if (searchTerms.isAdvancedSearch()) {
		organizations = OrganizationLocalServiceUtil.search(companyId, organization.getOrganizationId(), searchTerms.getName(), searchTerms.getType(), searchTerms.getStreet(), searchTerms.getCity(), searchTerms.getZip(), searchTerms.getRegionIdObj(), searchTerms.getCountryIdObj(), null, searchTerms.isAndOperator(), 0, 10000, new OrganizationNameComparator(true));
	}
	else {
		organizations = OrganizationLocalServiceUtil.search(companyId, organization.getOrganizationId(), searchTerms.getKeywords(), searchTerms.getType(), searchTerms.getRegionIdObj(), searchTerms.getCountryIdObj(), null, searchContainer.getStart(), searchContainer.getEnd(), new OrganizationNameComparator(true));
	}

	long parentOrganizationId = organization.getParentOrganizationId();

	if (parentOrganizationId != OrganizationImpl.DEFAULT_PARENT_ORGANIZATION_ID) {
		Organization parentOrganization = OrganizationLocalServiceUtil.getOrganization(parentOrganizationId);

		organizations.addAll(searchBottomUpRecursiveOrganizations(companyId, parentOrganization, searchTerms, searchContainer));
	}

	return organizations;
}
%>