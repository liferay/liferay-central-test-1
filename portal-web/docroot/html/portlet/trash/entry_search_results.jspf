<%--
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
if (Validator.isNotNull(searchTerms.getKeywords())) {
	String keywords = searchTerms.getKeywords();

	SearchContext searchContext = SearchContextFactory.getInstance(request);

	searchContext.setEnd(searchContainer.getEnd());
	searchContext.setStart(searchContainer.getStart());

	BooleanQuery booleanQueryMust = BooleanQueryFactoryUtil.create(searchContext);
	booleanQueryMust.addTerm(Field.COMPANY_ID, String.valueOf(themeDisplay.getCompanyId()), false, BooleanClauseOccur.MUST);
	booleanQueryMust.addTerm(Field.GROUP_ID, String.valueOf(groupId * -1), false, BooleanClauseOccur.MUST);

	BooleanQuery booleanQueryShould = BooleanQueryFactoryUtil.create(searchContext);
	booleanQueryShould.addTerm(Field.CONTENT, keywords, true, BooleanClauseOccur.SHOULD);
	booleanQueryShould.addTerm(Field.USER_NAME, keywords, true, BooleanClauseOccur.SHOULD);
	booleanQueryShould.addTerm(Field.TITLE, keywords, true, BooleanClauseOccur.SHOULD);

	BooleanQuery fullQuery = BooleanQueryFactoryUtil.create(searchContext);
	fullQuery.add(booleanQueryMust, BooleanClauseOccur.MUST);
	fullQuery.add(booleanQueryShould,BooleanClauseOccur.MUST);

	Hits hits = SearchEngineUtil.search(searchContext, fullQuery);

	for (Document doc : hits.getDocs()) {

		long classPK = GetterUtil.getLong(doc.get(Field.ENTRY_CLASS_PK));
		String entryClassName = GetterUtil.getString((doc.get(Field.ENTRY_CLASS_NAME)));

		TrashEntry entry = null;

		try {
			entry = TrashEntryLocalServiceUtil.getEntry(entryClassName, classPK);

			TrashHandler trashHandler =
				TrashHandlerRegistryUtil.getTrashHandler(entryClassName);

			TrashRenderer trashRenderer = trashHandler.getTrashRenderer(
				classPK);

			if (!trashRenderer.hasViewPermission(permissionChecker)) {
				continue;
			}
		}
		catch (Exception e) {
			if (_log.isWarnEnabled()) {
				_log.warn("Can't find trash entry with the given classPK: " + classPK + " and className: " + entryClassName);
			}

			continue;
		}

		results.add(entry);
	}

	total = results.size();

	aproximate = total > PropsValues.TRASH_SEARCH_LIMIT;

	pageContext.setAttribute("results", results);
	pageContext.setAttribute("total", total);
}
else {

	Object[] entries = TrashEntryServiceUtil.getEntries(groupId, searchContainer.getStart(), searchContainer.getEnd(), searchContainer.getOrderByComparator());

	pageContext.setAttribute("results", entries[0]);
	pageContext.setAttribute("total", entries[1]);

	aproximate = (Boolean)entries[2];
}
%>

<%!
private static Log _log = LogFactoryUtil.getLog("portal-web.docroot.html.portlet.trash.trash_search_results_jspf");
%>