<?xml version="1.0"?>

<project name="portal-test" basedir="." default="test" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="build.xml" />

	<property file="${project.dir}/test.${user.name}.properties" />
	<property file="${project.dir}/test.${env.COMPUTERNAME}.properties" />
	<property file="${project.dir}/test.properties" />

	<propertycopy name="db.host" from="db.${db.type}.host" silent="true" />
	<propertycopy name="db.driver" from="db.${db.type}.driver" silent="true" />
	<propertycopy name="db.schema" from="db.${db.type}.schema" silent="true" />
	<propertycopy name="db.url" from="db.${db.type}.url" silent="true" />
	<propertycopy name="db.username" from="db.${db.type}.username" silent="true" />
	<propertycopy name="db.password" from="db.${db.type}.password" silent="true" />

	<target name="clean-up-bundles">
		<delete file="test.${user.name}.properties" />

		<delete dir="${user.home}/liferay"/>

		<delete includeemptydirs="true">
			<fileset dir="${app.server.parent.dir}" excludes="*.zip"/>
		</delete>
	</target>

	<target name="prepare-common">
		<antcall target="prepare-portal-properties" inheritAll="false" />

		<antcall target="prepare-portal-ext-properties" inheritAll="false" />

		<antcall target="revert-test-properties" />

		<exec executable="cmd.exe">
			<arg line="/c svn revert portal-web/docroot/WEB-INF/web.xml" />
		</exec>

		<replace
			file="portal-web/docroot/WEB-INF/web.xml"
			token="session-timeout&gt;30&lt;"
			value="session-timeout&gt;2&lt;"
		/>

		<if>
			<not>
				<equals arg1="${skip.prepare-bundle}" arg2="true" />
			</not>
			<then>
				<antcall target="clean" />

				<antcall target="start" />
			</then>
		</if>
	</target>

	<target name="prepare-mysql">
		<echo file="test.${user.name}.properties">db.type=mysql</echo>

		<antcall target="prepare-common" />
	</target>

	<target name="prepare-oracle">
		<echo file="test.${user.name}.properties">db.type=oracle</echo>

		<antcall target="prepare-common" />
	</target>

	<target name="prepare-portal-ext-properties">
		<echo file="portal-impl/src/portal-ext.properties">jdbc.default.jndi.name=

jdbc.default.driverClassName=${db.driver}
jdbc.default.url=${db.url}
jdbc.default.username=${db.username}
jdbc.default.password=${db.password}

captcha.max.challenges=0

browser.launcher.url=

mail.session.jndi.name=

axis.servlet.hosts.allowed=

tunnel.servlet.hosts.allowed=</echo>

		<if>
			<equals arg1="${db.type}" arg2="oracle" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

jdbc.default.acquireIncrement=1
jdbc.default.maxPoolSize=5
jdbc.default.minPoolSize=1
jdbc.default.numHelperThreads=1</echo>
			</then>
		</if>

		<if>
			<not>
				<equals arg1="${custom.properties}" arg2="$${custom.properties}" />
			</not>
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

${custom.properties}</echo>
			</then>
		</if>
	</target>

	<target name="prepare-portal-properties">
		<exec executable="cmd.exe">
			<arg line="/c svn revert portal-impl/src/portal.properties" />
		</exec>

		<replace file="portal-impl/src/portal.properties">
			<replacefilter
				token="#upgrade.processes="
				value="upgrade.processes="
			/>
			<replacefilter
				token="#com.liferay.portal.upgrade.UpgradeProcess_"
				value="com.liferay.portal.upgrade.UpgradeProcess_"
			/>
			<replacefilter
				token="verify.frequency=0"
				value="verify.frequency=1"
			/>
		</replace>
	</target>

	<target name="prepare-postgresql">
		<echo file="test.${user.name}.properties">db.type=postgresql</echo>

		<antcall target="prepare-common" />
	</target>

	<target name="prepare-root-xml">
		<echo file="${app.server.tomcat.dir}/conf/Catalina/localhost/ROOT.xml"><![CDATA[<Context path="" crossContext="true">

<Resource
	name="jdbc/LiferayPool"
	auth="Container"
	type="javax.sql.DataSource"
	driverClassName="${db.driver}"
	url="${db.url}"
	username="${db.username}"
	password="${db.password}"
	maxActive="20"
/>
</Context>]]></echo>
	</target>

	<target name="prepare-sql-server">
		<echo file="test.${user.name}.properties">db.type=sql-server</echo>

		<antcall target="prepare-common" />
	</target>

	<target name="prepare-virtual-host-name-properties">
		<if>
			<not>
				<equals arg1="${virtual.host.name}" arg2="$${virtual.host.name}" />
			</not>
			<then>
				<replace
					file="portal-impl/test/test-portal-impl.properties"
					token="localhost:8080"
					value="www.${virtual.host.name}.com:8080"
				/>
				<replace
					file="portal-web/test/test-portal-web.properties"
					token="localhost:8080"
					value="www.${virtual.host.name}.com:8080"
				/>
			</then>
		</if>
	</target>

	<target name="prepare-vm-server">
		<ant antfile="build-dist.xml" target="build-dist-tomcat" />

		<delete dir="dist" />
		<mkdir dir="dist" />

		<ant antfile="build-dist.xml" target="zip-portal-war-2.4" />

		<echo>Copying ${vm.drive}\${vm.host}\${vm.host}.vmdk.${vm.vmdk.suffix} to ${vm.drive}\${vm.host}\${vm.host}.vmdk</echo>

		<exec executable="cmd">
			<arg line="/c copy /y ${vm.drive}\${vm.host}\${vm.host}.vmdk.${vm.vmdk.suffix} ${vm.drive}\${vm.host}\${vm.host}.vmdk" />
		</exec>

		<exec dir="${vm.drive}/${vm.host}" executable="${vmware-cmd.executable}">
			<arg line="${vm.drive}\${vm.host}\${vm.host}.vmx start" />
		</exec>

		<sleep seconds="60" />

		<echo file="hosts">127.0.0.1	localhost
127.0.0.1	liferay-b711dd9
127.0.0.1	www.able.com
127.0.0.1	www.baker.com
127.0.0.1	www.charlie.com
127.0.0.1	www.dog.com
127.0.0.1	www.easy.com
127.0.0.1	www.fox.com</echo>

		<exec executable="${pscp.executable}">
			<arg line="-pw ${vm.password} hosts dist\liferay-portal-${lp.version}.war tunnel-web\tunnel-web.war ${vm.username}@${vm.host}:/" />
		</exec>

		<delete file="hosts" />

		<exec executable="${plink.executable}">
			<arg line="-pw ${vm.password} ${vm.username}@${vm.host} cmd.exe /c move /y C:\hosts C:\WINDOWS\system32\drivers\etc\hosts" />
		</exec>

		<ant antfile="build-dist.xml" target="zip-portal-dependencies" />
	</target>

	<target name="rebuild-database">
		<if>
			<equals arg1="${sql.legacy.zip}" arg2="$${sql.legacy.zip}" />
			<then>
				<fail>
.

Please set "sql.legacy.zip" in test.properties to point to the legacy SQL ZIP
file.
				</fail>
			</then>
			<else>
				<if>
					<or>
						<not>
							<available file="sql/legacy" />
						</not>
						<not>
							<uptodate
								srcfile="${sql.legacy.zip}"
								targetfile="sql/legacy"
							/>
						</not>
					</or>
					<then>
						<delete dir="sql/legacy" failonerror="false" />

						<unzip src="${sql.legacy.zip}" dest="sql" />

						<touch>
							<fileset dir="sql/legacy" />
						</touch>
					</then>
				</if>

				<if>
					<equals arg1="${skip.rebuild-database}" arg2="$${skip.rebuild-database}" />
					<then>
						<if>
							<equals arg1="${db.type}" arg2="mysql" />
							<then>
								<antcall target="rebuild-database-mysql" />
							</then>
							<elseif>
								<equals arg1="${db.type}" arg2="oracle" />
								<then>
									<antcall target="rebuild-database-oracle" />
								</then>
							</elseif>
							<elseif>
								<equals arg1="${db.type}" arg2="postgresql" />
								<then>
									<antcall target="rebuild-database-postgresql" />
								</then>
							</elseif>
							<elseif>
								<equals arg1="${db.type}" arg2="sql-server" />
								<then>
									<antcall target="rebuild-database-sql-server" />
								</then>
							</elseif>
						</if>
					</then>
				</if>
			</else>
		</if>
	</target>

	<target name="rebuild-database-mysql">
		<if>
			<or>
				<equals arg1="${sql.dir}" arg2="$${sql.dir}" />
				<equals arg1="${sql.file}" arg2="$${sql.file}" />
			</or>
			<then>
				<ant dir="sql" target="rebuild-mysql" inheritAll="false" />
			</then>
			<else>
				<exec executable="cmd">
					<arg line="/c mysql &lt; ${sql.dir}${sql.file}" />
				</exec>

				<delete file="${sql.file}" />
			</else>
		</if>
	</target>

	<target name="rebuild-database-oracle">
		<if>
			<or>
				<equals arg1="${sql.dir}" arg2="$${sql.dir}" />
				<equals arg1="${sql.file}" arg2="$${sql.file}" />
			</or>
			<then>
				<property name="sql.dir" value="sql\create\" />
				<property name="sql.file" value="create-oracle.sql" />
			</then>
		</if>

		<tstamp>
			<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
		</tstamp>

		<property name="temp.dir" value="temp\${db.oracle.username}\${tstamp.value}" />

		<exec executable="${plink.executable}">
			<arg line="-pw ${vm.password} ${vm.username}@${db.oracle.host} cmd.exe /c mkdir C:\${temp.dir}" />
		</exec>

		<exec executable="${pscp.executable}">
			<arg line="-pw ${vm.password} ${sql.dir}${sql.file} ${vm.username}@${db.oracle.host}:\${temp.dir}" />
		</exec>

		<exec executable="${plink.executable}">
			<arg line="-pw ${vm.password} ${vm.username}@${db.oracle.host} sqlplus system/password @C:\${temp.dir}\${sql.file} ${db.oracle.username} ${db.oracle.password}" />
		</exec>

		<exec executable="${plink.executable}">
			<arg line="-pw ${vm.password} ${vm.username}@${db.oracle.host} cmd.exe /c rmdir /q /s C:\${temp.dir}" />
		</exec>
	</target>

	<target name="rebuild-database-postgresql">
		<if>
			<or>
				<equals arg1="${sql.dir}" arg2="$${sql.dir}" />
				<equals arg1="${sql.file}" arg2="$${sql.file}" />
			</or>
			<then>
				<property name="sql.dir" value="sql\create\" />
				<property name="sql.file" value="create-postgresql.sql" />
			</then>
		</if>

		<tstamp>
			<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
		</tstamp>

		<property name="temp.dir" value="temp\${db.postgresql.schema}\${tstamp.value}\" />

		<copy file="${sql.dir}${sql.file}" tofile="${sql.file}" />

		<replace file="${sql.file}">
			<replacefilter token="drop database lportal;" value="drop database ${db.postgresql.schema};"/>
			<replacefilter token="create database lportal encoding = 'UNICODE';" value="create database ${db.postgresql.schema} encoding = 'UNICODE';"/>
			<replacefilter token="\c lportal;" value="\c ${db.postgresql.schema};"/>
		</replace>

		<exec executable="${plink.executable}">
			<arg line="-pw ${vm.password} ${vm.username}@${db.postgresql.host} cmd.exe /c mkdir C:\${temp.dir}" />
		</exec>

		<exec executable="${pscp.executable}">
			<arg line="-pw ${vm.password} ${sql.file} ${vm.username}@${db.postgresql.host}:\${temp.dir}" />
		</exec>

		<exec executable="${plink.executable}">
			<arg line="-pw ${vm.password} ${vm.username}@${db.postgresql.host} C:\Progra~1\PostgreSQL\8.3\bin\psql.exe -U ${db.postgresql.username} -f C:\${temp.dir}\${sql.file}" />
		</exec>

		<exec executable="${plink.executable}">
			<arg line="-pw ${vm.password} ${vm.username}@${db.postgresql.host} cmd.exe /c rmdir /q /s C:\${temp.dir}" />
		</exec>

		<delete file="${sql.file}" />
	</target>

	<target name="rebuild-database-sql-server">
		<if>
			<or>
				<equals arg1="${sql.dir}" arg2="$${sql.dir}" />
				<equals arg1="${sql.file}" arg2="$${sql.file}" />
			</or>
			<then>
				<property name="sql.dir" value="sql\create\" />
				<property name="sql.file" value="create-sql-server.sql" />
			</then>
		</if>

		<tstamp>
			<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
		</tstamp>

		<property name="temp.dir" value="temp\${db.sql-server.schema}\${tstamp.value}\" />

		<copy file="${sql.dir}${sql.file}" tofile="${sql.file}" />

		<replace file="${sql.file}">
			<replacefilter token="drop database lportal;" value="drop database ${db.sql-server.schema};"/>
			<replacefilter token="create database lportal;" value="create database ${db.sql-server.schema};"/>
			<replacefilter token="use lportal;" value="use ${db.sql-server.schema};"/>
		</replace>

		<exec executable="${plink.executable}">
			<arg line="-pw ${vm.password} ${vm.username}@${db.sql-server.host} cmd.exe /c mkdir C:\${temp.dir}" />
		</exec>

		<exec executable="${pscp.executable}">
			<arg line="-pw ${vm.password} ${sql.file} ${vm.username}@${db.sql-server.host}:\${temp.dir}" />
		</exec>

		<exec executable="${plink.executable}">
			<arg line="-pw ${vm.password} ${vm.username}@${db.sql-server.host} osql -n -U ${db.sql-server.username} -P ${db.sql-server.password} -i C:\${temp.dir}\${sql.file}" />
		</exec>

		<exec executable="${plink.executable}">
			<arg line="-pw ${vm.password} ${vm.username}@${db.sql-server.host} cmd.exe /c rmdir /q /s C:\${temp.dir}" />
		</exec>

		<delete file="${sql.file}" />
	</target>

	<target name="replace-remote-file">
		<tstamp>
			<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
		</tstamp>

		<exec executable="${pscp.executable}">
			<arg line="-pw ${vm.password} ${vm.username}@${remote.host}:${remote.file} ${tstamp.value}" />
		</exec>

		<replace
			file="${tstamp.value}"
			token="${remote.replace.token}"
			value="${remote.replace.value}"
		/>

		<exec executable="${pscp.executable}">
			<arg line="-pw ${vm.password} ${tstamp.value} ${vm.username}@${remote.host}:${remote.file}" />
		</exec>

		<delete file="${tstamp.value}" />
	</target>

	<target name="revert-test-properties">
		<exec executable="cmd.exe">
			<arg line="/c svn revert portal-impl/test/test-portal-impl.properties" />
		</exec>

		<exec executable="cmd.exe">
			<arg line="/c svn revert portal-web/test/test-portal-web.properties" />
		</exec>
	</target>

	<target name="run-selenium-test">
		<if>
			<equals arg1="${test.class}" arg2="PortalWebTestSuite" />
			<then>
				<ant dir="portal-impl" target="test-class" inheritAll="false">
					<property name="class" value="ServiceHttpTestSuite" />
				</ant>

				<ant dir="portal-impl" target="test-class" inheritAll="false">
					<property name="class" value="ServiceSoapTestSuite" />
				</ant>
			</then>
		</if>

		<ant dir="portal-web" target="test-class" inheritAll="false">
			<property name="class" value="${test.class}" />
		</ant>
	</target>

	<target name="run-simple-server">
		<antcall target="rebuild-database" inheritAll="false" />

		<delete includeemptydirs="true" failonerror="false">
			<fileset
				dir="${simple.server.deploy.dir}"
				includes="*-portlet/**,*-theme/**"
			/>
		</delete>

		<if>
			<not>
				<equals arg1="${portlet.plugins.includes}" arg2="$${portlet.plugins.includes}" />
			</not>
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="portlets" />
					<property name="plugins.includes" value="${portlet.plugins.includes}" />
				</ant>
			</then>
		</if>

		<if>
			<not>
				<equals arg1="${theme.plugins.includes}" arg2="$${theme.plugins.includes}" />
			</not>
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="themes" />
					<property name="plugins.includes" value="${theme.plugins.includes}" />
				</ant>
			</then>
		</if>

		<parallel>
			<exec dir="${simple.server.bin.dir}" executable="${simple.server.start.executable}" resolveexecutable="true">
				<arg line="${simple.server.start.executable.arg.line}" />
			</exec>

			<sequential>
				<waitfor>
					<http url="http://localhost:8080" />
				</waitfor>

				<if>
					<or>
						<not>
							<equals arg1="${portlet.plugins.includes}" arg2="$${portlet.plugins.includes}" />
						</not>
						<not>
							<equals arg1="${theme.plugins.includes}" arg2="$${theme.plugins.includes}" />
						</not>
					</or>
					<then>
						<sleep seconds="30" />
					</then>
				</if>

				<antcall target="run-selenium-test" />

				<exec dir="${simple.server.bin.dir}" executable="${simple.server.stop.executable}" resolveexecutable="true">
					<arg line="${simple.server.stop.executable.arg.line}" />
				</exec>
			</sequential>
		</parallel>
	</target>

	<target name="start-selenium">
		<java jar="lib/development/selenium-server.jar" fork="true" spawn="true">
			<arg line="-port 14444 -singleWindow" />
		</java>
	</target>

	<target name="stop-selenium">
		<antelope:post to="http://localhost:14444/selenium-server/driver/?cmd=shutDown" wantresponse="true" />
	</target>

	<target name="test">
		<antcall target="prepare-mysql" />

		<antcall target="rebuild-database" inheritAll="false" />

		<antcall target="revert-test-properties" />

		<ant dir="portal-impl" target="test-class" inheritAll="false">
			<property name="class" value="ServiceTestSuite" />
		</ant>

		<ant dir="portal-impl" target="test-class" inheritAll="false">
			<property name="class" value="PersistenceTestSuite" />
		</ant>

		<ant dir="portal-impl" target="test-class" inheritAll="false">
			<property name="class" value="CMISTestSuite" />
		</ant>

		<ant dir="portal-impl" target="test-class" inheritAll="false">
			<property name="class" value="WebDAVTestSuite" />
		</ant>

		<ant dir="portal-impl" target="test-class" inheritAll="false">
			<property name="class" value="XmlRpcTestSuite" />
		</ant>

		<ant dir="portal-impl" target="test-class" inheritAll="false">
			<property name="class" value="MiscTestSuite" />
		</ant>

		<ant dir="portal-kernel" target="test" inheritAll="false" />

		<!--<ant dir="util-java" target="test" inheritAll="false" />-->
	</target>
</project>