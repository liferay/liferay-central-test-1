<?xml version="1.0" encoding="UTF-8"?>

<javadoc>
	<name>WorkflowInstanceInfo</name>
	<type>com.liferay.portal.kernel.workflow.WorkflowInstanceInfo</type>
	<comment><![CDATA[<p>This interface represents the information for a single workflow instance created and loaded through the {@link WorkflowInstanceManager} where you can find further descriptions about how to start and work with workflow instances.</p><p>A workflow instance is always created in connection with a workflow definition and optionally related to a domain object instance. The workflow instance is the element used to track the current state of a workflow and its history and any other related entities like tasks, timers and jobs.</p><p>Usually this interface is not implemented by the native process instance depending on the underlying workflow engine but is rather returned as a proxy information object just holding the necessary information to represent the native workflow instance.</p>]]></comment>
	<author>Micha Kiener</author>
	<method>
		<name>getChildren</name>
		<comment><![CDATA[If this is a parent workflow instance, its children are being returned using this method. A child workflow instance is usually being created automatically by the engine to split the process flow into parallel processing (like a fork), so every child instance has its own track of activities and information related to it.]]></comment>
		<return><![CDATA[the list of children, if any, an empty list otherwise (never
<code>null</code>)]]></return>
	</method>
	<method>
		<name>getContext</name>
		<comment><![CDATA[<p>Returns the map with context information as being provided while creating this workflow instance. Depending on the underlying engine, this map is usually being persisted along with the workflow instance for later retrieval and referencing within the workflow definition.</p><p>If the engine also supports EL functionality within the workflow definition, this map could even be extended during the execution of the workflow as new, process scoped beans could be created and stored within this context map.</p><p>The context map is a good place to store information needed during the execution plan of the workflow, usually used to trigger actions or to relate to for conditions of decisions and so on. If the context information is persisted (which is usually the case), make sure that all objects stored within the map are serializable.</p><p><b>NEVER</b>use the map returned by this information object to additionally store information in it as it is read only and would not affect the native map used by the engine. To add any additional information to the context, use {@link WorkflowInstanceManager#addContextInformation(long, Map)} instead.</p>]]></comment>
		<return><![CDATA[the map with context information for this workflow instance]]></return>
	</method>
	<method>
		<name>getCurrentNodeName</name>
		<comment><![CDATA[<p>Returns the name of the current node this process instance is waiting in which is most likely a state, a task or a fork preventing the engine from proceeding with the workflow graph execution.</p><p>If the name returned is a fork, every branch of the fork is represented as own process instances related to this one as children. If the current node is a task, there must be a workflow task to be completed (fulfilled) in order to advance the workflow.</p>]]></comment>
		<return><![CDATA[the name of the current node this process instance is waiting in]]></return>
	</method>
	<method>
		<name>getEndDate</name>
		<comment><![CDATA[Returns the end date of this workflow instance which is the same as the last modification date when the instance has been finished.]]></comment>
		<return><![CDATA[the end date, if ended already, <code>null</code> otherwise]]></return>
	</method>
	<method>
		<name>getParent</name>
		<comment><![CDATA[If this is a child workflow instance, its parent instance is being returned by this method. See {@link #getChildren()} for more details about parent - child relationship.]]></comment>
		<return><![CDATA[the parent instance of this child instance or <code>null</code>
if this is the root instance]]></return>
	</method>
	<method>
		<name>getRelationId</name>
		<comment><![CDATA[<p>If this workflow instance was created in relation of a domain object instance, its identifier is returned by this method.</p><p><b><i>Note</i></b>The support of a related domain object however is optional and might not be supported by the underlying engine.</p>]]></comment>
		<return><![CDATA[the domain object identifier, if related to one,
<code>null</code> otherwise]]></return>
		<see>WorkflowInstanceManager#getWorkflowInstanceInfo(String, long, boolean) for more details about related domain objects</see>
	</method>
	<method>
		<name>getRelationType</name>
		<comment><![CDATA[<p>If this workflow instance was created in relation of a domain object instance, its type identifier is returned by this method.</p><p><b><i>Note</i></b>The support of a related domain object however is optional and might not be supported by the underlying engine.</p>]]></comment>
		<return><![CDATA[the domain object type identifier, if related to one,
<code>null</code> otherwise]]></return>
		<see>WorkflowInstanceManager#getWorkflowInstanceInfo(String, long, boolean) for more details about related domain objects</see>
	</method>
	<method>
		<name>getStartDate</name>
		<comment><![CDATA[Returns the date and time of the creation time of this workflow instance.]]></comment>
		<return><![CDATA[the start date]]></return>
	</method>
	<method>
		<name>getWorkflowDefinitionName</name>
		<comment><![CDATA[Returns the workflow definition name this instance was created in relation with. Must never be<code>null</code>.]]></comment>
		<return><![CDATA[the workflow definition name this instance is running for]]></return>
	</method>
	<method>
		<name>getWorkflowDefinitionVersion</name>
		<comment><![CDATA[Returns the version of the workflow definition this instance was created in relation with. If the underlying engine does not support definition versioning, this might be ignored. A workflow instance created with a certain version of a definition must not be changed to another one as this could compromise its current state, history and related objects like tasks, jobs and timers.]]></comment>
		<return><![CDATA[the version of the definition this instance was created for]]></return>
	</method>
	<method>
		<name>getWorkflowInstanceId</name>
		<comment><![CDATA[Returns the unique identifier of the workflow instance object which is usually the primary key of the persisted object instance.]]></comment>
		<return><![CDATA[the identifier of the workflow instance]]></return>
	</method>
</javadoc>