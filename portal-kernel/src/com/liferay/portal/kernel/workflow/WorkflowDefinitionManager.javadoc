<?xml version="1.0" encoding="UTF-8"?>

<javadoc>
	<name>WorkflowDefinitionManager</name>
	<type>com.liferay.portal.kernel.workflow.WorkflowDefinitionManager</type>
	<comment><![CDATA[<p> The workflow definition manager is used to deploy workflow definitions. A workflow definition is the process model of a workflow to be executed by creating a workflow instance attached to it, reflecting the current state and history as well as any related objects like tasks, jobs and timers. </p> <p> Depending on the underlying workflow engine, even hot deployment is possible. </p>]]></comment>
	<author>Micha Kiener</author>
	<method>
		<name>deployWorkflowDefinition</name>
		<comment><![CDATA[<p> Deploys the given workflow definition within the engine. </p> <p> If the workflow definition already exists and versioning is not supported or it is the same version as already existing, the definition is exchanged with the given one, otherwise the definition is added as a complete new definition or as a new version of an already existing definition. </p> <p> If you deploy a workflow definition by overwriting an existing one, make sure it is compatible with already existing workflow instances to not compromise their execution plan or current state, tasks or timers. It is usually a good practice to deploy changed workflow definitions as new versions, so that existing workflow instances are being finished with the old definition, and newly created workflow instances are created by using the new version. </p>]]></comment>
		<param>
			<name>workflowDefinition</name>
			<type>com.liferay.portal.kernel.workflow.WorkflowDefinition</type>
			<comment><![CDATA[]]></comment>
		</param>
		<param>
			<name>callingUserId</name>
			<type>long</type>
			<comment><![CDATA[]]></comment>
		</param>
		<throws>
			<name>WorkflowException</name>
			<type>com.liferay.portal.kernel.workflow.WorkflowException</type>
			<comment><![CDATA[]]></comment>
		</throws>
	</method>
	<method>
		<name>getWorkflowDefinitions</name>
		<comment><![CDATA[Returns a list of all workflow definitions available within the repository. The returned list will contain information objects about the workflow definitions but without the definition model file actually, so {@link WorkflowDefinition#getJar()} will always return <code>null</code>. The list will only contain the newest (actual) version of a definition, if you need all versions for a specific version, use the method {@link #getWorkflowDefinitions(String)} instead where all versions for a specific workflow definition are being returned.]]></comment>
		<return><![CDATA[the list of available workflow definitions, never <code>null</code>]]></return>
	</method>
	<method>
		<name>getWorkflowDefinitions</name>
		<comment><![CDATA[Returns a list of all versions of the specified workflow definition, if found, an empty list otherwise or a list containing just one element, if there is only one version available or versioning is not supported at all by the underlying workflow engine.]]></comment>
		<param>
			<name>workflowDefinitionName</name>
			<type>java.lang.String</type>
			<comment><![CDATA[]]></comment>
		</param>
		<return><![CDATA[the list of all versions, if any found, an empty list otherwise or a list containing just one element, must never be <code>null</code>]]></return>
	</method>
	<method>
		<name>isSupportsVersioning</name>
		<comment><![CDATA[Returns <code>true</code>, if the underlying workflow system supports versioning of workflow definitions. If versioning is not supported, the version number of a workflow definition is most likely ignored by the engine.]]></comment>
		<return><![CDATA[<code>true</code>, if the workflow engine supports versioning]]></return>
	</method>
</javadoc>