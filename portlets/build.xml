<?xml version="1.0"?>

<project name="portlets" basedir="." default="deploy" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="../build-common.xml" />

	<target name="clean">
		<antcall target="loop-modules">
			<param name="loop.modules.cmd" value="clean" />
		</antcall>
	</target>

	<target name="clean-module">
		<delete file="../${module.name}.war" failonerror="false" />
		<delete dir="${module.name}.war/WEB-INF/classes/com" failonerror="false" />

		<delete failonerror="false">
			<fileset dir="${module.name}.war/WEB-INF/lib" includes="util-bridges.jar,util-java.jar,util-taglib.jar" />
			<fileset dir="${module.name}.war/WEB-INF/tld" includes="liferay-portlet.tld" />
		</delete>
	</target>

	<target name="compile">
		<antcall target="loop-modules">
			<param name="loop.modules.cmd" value="compile" />
		</antcall>
	</target>

	<target name="compile-module">
		<mkdir dir="${module.name}.war/WEB-INF/classes" />
		<mkdir dir="${module.name}.war/WEB-INF/lib" />

		<if>
			<equals arg1="${module.name}" arg2="sample-struts-global-portlet" />
			<then>
				<path id="web-lib.classpath">
					<path refid="project.classpath" />
				</path>
			</then>
			<else>
				<path id="web-lib.classpath">
					<fileset dir="${project.dir}/lib/portal" includes="commons-logging.jar,log4j.jar" />
					<pathelement location="${project.dir}/util-java/classes" />
					<fileset dir="${module.name}.war/WEB-INF/lib" includes="*.jar" />
				</path>
			</else>
		</if>

		<javac
			classpathref="web.classpath"
			compiler="${javac.compiler}"
			debug="${javac.debug}"
			deprecation="${javac.deprecation}"
			destdir="${module.name}.war/WEB-INF/classes"
			fork="${javac.fork}"
			memoryMaximumSize="${javac.memoryMaximumSize}"
			nowarn="${javac.nowarn}"
			srcdir="${module.name}.war/WEB-INF/src"
		/>
	</target>

	<target name="war">
		<antcall target="loop-modules">
			<param name="loop.modules.cmd" value="war" />
		</antcall>

		<copy
			file="sample-spring-portlet.war"
			tofile="../sample-spring-portlet-${lp.version.file.name}.war"
		/>
	</target>

	<target name="war-alfresco">

		<!--
		Download Alfresco 1.4.0 from
		http://www.sourceforge.net/projects/alfresco.

		The WAR must be deployed to the /alfresco context. See the
		implementation of org.alfresco.webservice.util.WebServiceFactory to see
		how to customize the web service end point.
		
		Manually remove portlet-api-lib.jar to resolve a class conflict.

		Add the required portlet XML files to make it work.
		-->

		<jar
			basedir="alfresco.war.ext"
			destfile="alfresco.war"
			update="yes"
		/>
	</target>

	<target name="war-module">
		<copy todir="${module.name}.war/WEB-INF/lib">
			<fileset
				dir="${project.dir}/lib/portal"
				includes="commons-logging.jar,log4j.jar"
			/>
		</copy>

		<copy
			file="${project.dir}/portal-ejb/classes/META-INF/portal-log4j.xml"
			tofile="${module.name}.war/WEB-INF/classes/log4j.xml"
		/>

		<if>
			<equals arg1="${module.name}" arg2="sample-portal-client-portlet" />
			<then>
				<copy todir="${module.name}.war/WEB-INF/lib">
					<fileset
						dir="${project.dir}/lib/development"
						includes="activation.jar,mail.jar"
					/>
					<fileset
						dir="${project.dir}/lib/portal"
						includes="axis.jar,commons-discovery.jar,commons-logging.jar,concurrent.jar,jaxrpc.jar,saaj.jar,trove.jar,wsdl4j.jar"
					/>
					<fileset
						dir="${project.dir}/portal-client"
						includes="portal-client.jar"
					/>
				</copy>
			</then>
		</if>

		<war
			basedir="${module.name}.war"
			destfile="../${module.name}-${lp.version.file.name}.war"
			excludes="WEB-INF/web.xml*"
			webxml="${module.name}.war/WEB-INF/web.xml"
		/>
	</target>

	<target name="war-sample-spring-portlet">

		<!--
		Download Spring Portlet MVC 2.0 M4 from
		http://opensource.atlassian.com/confluence/spring/display/JSR168/Home.

		Add additional Liferay XML to help categorize the sample portlets for
		better user experience.
		-->

		<jar
			basedir="sample-spring-portlet.war.ext"
			destfile="sample-spring-portlet.war"
			update="yes"
		/>
	</target>

	<target name="deploy">
		<java
			classname="com.liferay.portal.tools.PortletDeployer"
			classpathref="project.classpath"
			fork="true"
			newenvironment="true"
		>

			<!-- Required Arguments -->

			<jvmarg value="-Ddeployer.base.dir=./" />
			<jvmarg value="-Ddeployer.dest.dir=${app.server.deploy.dir}" />
			<jvmarg value="-Ddeployer.app.server.type=${app.server.type}" />
			<jvmarg value="-Ddeployer.portlet.taglib.dtd=${project.dir}/util-taglib/classes/META-INF/liferay-portlet.tld" />
			<jvmarg value="-Ddeployer.unpack.war=true" />

			<!-- Optional Arguments -->

			<jvmarg value="-Ddeployer.tomcat.lib.dir=${app.server.tomcat.lib.global.dir}" />

			<!-- Dependent Libraries -->

			<arg value="${project.dir}/util-bridges/util-bridges.jar" />
			<arg value="${project.dir}/util-java/util-java.jar" />
			<arg value="${project.dir}/util-taglib/util-taglib.jar" />

			<!-- Specific WARs -->

			<!--
			<arg line="sample-dao-portlet.war sample-jsf-myfaces-portlet.war" />
			-->

			<arg line="${deploy.specific.wars}" />
		</java>
	</target>

	<target name="loop-modules">
		<for param="module.name">
			<path>
				<dirset dir="." includes="*.war" />
			</path>
			<sequential>
				<antelope:stringutil string="@{module.name}" property="module.name.beginindex">
					<lastindexof string="${file.separator}" />
				</antelope:stringutil>

				<math
					datatype="int"
					operand1="${module.name.beginindex}"
					operand2="1"
					operation="+"
					result="module.name.beginindex"
				/>

				<antelope:stringutil string="@{module.name}" property="module.name.endindex">
					<lastindexof string=".war" />
				</antelope:stringutil>

				<antelope:stringutil string="@{module.name}" property="module.name">
					<substring beginindex="${module.name.beginindex}" endindex="${module.name.endindex}" />
				</antelope:stringutil>

				<if>
					<or>
						<equals arg1="${deploy.specific.wars}" arg2="" />
						<antelope:contains string="${deploy.specific.wars}" substring="${module.name}" />
					</or>
					<then>
						<if>
							<equals arg1="${loop.modules.cmd}" arg2="clean" />
							<then>
								<antcall target="clean-module" />
							</then>
							<elseif>
								<equals arg1="${loop.modules.cmd}" arg2="compile" />
								<then>
									<antcall target="compile-module" />
								</then>
							</elseif>
							<elseif>
								<equals arg1="${loop.modules.cmd}" arg2="war" />
								<then>
									<antcall target="war-module" />
								</then>
							</elseif>
						</if>
					</then>
				</if>
			</sequential>
		</for>
	</target>
</project>