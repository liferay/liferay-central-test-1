/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portlet.shorturl.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import com.liferay.portlet.shorturl.model.ShortURL;
import com.liferay.portlet.shorturl.model.ShortURLModel;
import com.liferay.portlet.shorturl.model.ShortURLSoap;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the ShortURL service. Represents a row in the &quot;ShortURL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portlet.shorturl.model.ShortURLModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShortURLImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ShortURLImpl
 * @see com.liferay.portlet.shorturl.model.ShortURL
 * @see com.liferay.portlet.shorturl.model.ShortURLModel
 * @generated
 */
public class ShortURLModelImpl extends BaseModelImpl<ShortURL>
	implements ShortURLModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a short u r l model instance should use the {@link com.liferay.portlet.shorturl.model.ShortURL} interface instead.
	 */
	public static final String TABLE_NAME = "ShortURL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "shortURLId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "originalURL", Types.VARCHAR },
			{ "hash", Types.VARCHAR },
			{ "descriptor", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ShortURL (shortURLId LONG not null primary key,createDate DATE null,modifiedDate DATE null,originalURL STRING null,hash VARCHAR(255) null,descriptor VARCHAR(255) null)";
	public static final String TABLE_SQL_DROP = "drop table ShortURL";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.portlet.shorturl.model.ShortURL"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.portlet.shorturl.model.ShortURL"),
			true);

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ShortURL toModel(ShortURLSoap soapModel) {
		ShortURL model = new ShortURLImpl();

		model.setShortURLId(soapModel.getShortURLId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setOriginalURL(soapModel.getOriginalURL());
		model.setHash(soapModel.getHash());
		model.setDescriptor(soapModel.getDescriptor());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ShortURL> toModels(ShortURLSoap[] soapModels) {
		List<ShortURL> models = new ArrayList<ShortURL>(soapModels.length);

		for (ShortURLSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public Class<?> getModelClass() {
		return ShortURL.class;
	}

	public String getModelClassName() {
		return ShortURL.class.getName();
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.portlet.shorturl.model.ShortURL"));

	public ShortURLModelImpl() {
	}

	public long getPrimaryKey() {
		return _shortURLId;
	}

	public void setPrimaryKey(long pk) {
		setShortURLId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_shortURLId);
	}

	public long getShortURLId() {
		return _shortURLId;
	}

	public void setShortURLId(long shortURLId) {
		_shortURLId = shortURLId;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public String getOriginalURL() {
		if (_originalURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _originalURL;
		}
	}

	public void setOriginalURL(String originalURL) {
		if (_originalOriginalURL == null) {
			_originalOriginalURL = _originalURL;
		}

		_originalURL = originalURL;
	}

	public String getOriginalOriginalURL() {
		return GetterUtil.getString(_originalOriginalURL);
	}

	public String getHash() {
		if (_hash == null) {
			return StringPool.BLANK;
		}
		else {
			return _hash;
		}
	}

	public void setHash(String hash) {
		if (_originalHash == null) {
			_originalHash = _hash;
		}

		_hash = hash;
	}

	public String getOriginalHash() {
		return GetterUtil.getString(_originalHash);
	}

	public String getDescriptor() {
		if (_descriptor == null) {
			return StringPool.BLANK;
		}
		else {
			return _descriptor;
		}
	}

	public void setDescriptor(String descriptor) {
		_descriptor = descriptor;
	}

	public ShortURL toEscapedModel() {
		if (isEscapedModel()) {
			return (ShortURL)this;
		}
		else {
			return (ShortURL)Proxy.newProxyInstance(ShortURL.class.getClassLoader(),
				new Class[] { ShortURL.class }, new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					ShortURL.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		ShortURLImpl shortURLImpl = new ShortURLImpl();

		shortURLImpl.setShortURLId(getShortURLId());
		shortURLImpl.setCreateDate(getCreateDate());
		shortURLImpl.setModifiedDate(getModifiedDate());
		shortURLImpl.setOriginalURL(getOriginalURL());
		shortURLImpl.setHash(getHash());
		shortURLImpl.setDescriptor(getDescriptor());

		shortURLImpl.resetOriginalValues();

		return shortURLImpl;
	}

	public int compareTo(ShortURL shortURL) {
		long pk = shortURL.getPrimaryKey();

		if (getPrimaryKey() < pk) {
			return -1;
		}
		else if (getPrimaryKey() > pk) {
			return 1;
		}
		else {
			return 0;
		}
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ShortURL shortURL = null;

		try {
			shortURL = (ShortURL)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = shortURL.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public void resetOriginalValues() {
		ShortURLModelImpl shortURLModelImpl = this;

		shortURLModelImpl._originalOriginalURL = shortURLModelImpl._originalURL;

		shortURLModelImpl._originalHash = shortURLModelImpl._hash;
	}

	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{shortURLId=");
		sb.append(getShortURLId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", originalURL=");
		sb.append(getOriginalURL());
		sb.append(", hash=");
		sb.append(getHash());
		sb.append(", descriptor=");
		sb.append(getDescriptor());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portlet.shorturl.model.ShortURL");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>shortURLId</column-name><column-value><![CDATA[");
		sb.append(getShortURLId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalURL</column-name><column-value><![CDATA[");
		sb.append(getOriginalURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hash</column-name><column-value><![CDATA[");
		sb.append(getHash());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descriptor</column-name><column-value><![CDATA[");
		sb.append(getDescriptor());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _shortURLId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _originalURL;
	private String _originalOriginalURL;
	private String _hash;
	private String _originalHash;
	private String _descriptor;
	private transient ExpandoBridge _expandoBridge;
}